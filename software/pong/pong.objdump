
pong.elf:     file format elf32-littlenios2
pong.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000035a0 memsz 0x000035a0 flags r-x
    LOAD off    0x000045c0 vaddr 0x0000b5c0 paddr 0x0000b8dc align 2**12
         filesz 0x0000031c memsz 0x0000031c flags rw-
    LOAD off    0x00004bf8 vaddr 0x0000bbf8 paddr 0x0000bbf8 align 2**12
         filesz 0x00000000 memsz 0x00000078 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000048dc  2**0
                  CONTENTS
  2 .text         00003528  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  0000b548  0000b548  00004548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000031c  0000b5c0  0000b8dc  000045c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000078  0000bbf8  0000bbf8  00004bf8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000bc70  0000bc70  000048dc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000048dc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000570  00000000  00000000  00004900  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008caf  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ab4  00000000  00000000  0000db1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000032a7  00000000  00000000  000105d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f10  00000000  00000000  0001387c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001bfe  00000000  00000000  0001478c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001775  00000000  00000000  0001638a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00017b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  00017b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00019a0e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00019a11  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00019a1d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00019a1e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00019a1f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00019a2a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00019a35  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000003  00000000  00000000  00019a40  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  00019a43  2**0
                  CONTENTS, READONLY
 26 .jdi          000049c2  00000000  00000000  00019a81  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004a8c4  00000000  00000000  0001e443  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000b548 l    d  .rodata	00000000 .rodata
0000b5c0 l    d  .rwdata	00000000 .rwdata
0000bbf8 l    d  .bss	00000000 .bss
0000bc70 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pong_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000927c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0000b5c0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00009b30 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009f20 l     F .text	00000034 alt_dev_reg
0000b6a0 l     O .rwdata	0000002c jtag_uart_0
0000b6cc l     O .rwdata	0000002c rs232_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0000a6f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000a828 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000a854 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a9e4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000ab44 l     F .text	0000003c alt_get_errno
0000ab80 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b40c l     F .text	0000003c alt_get_errno
00009c1c g     F .text	0000006c alt_main
0000b8dc g       *ABS*	00000000 __flash_rwdata_start
0000bc18 g     O .bss	00000010 txt
00008614 g     F .text	00000114 verifica_colisao
0000a43c g     F .text	00000090 alt_up_rs232_read_fd
000098d8 g     F .text	00000060 memmove
00008bcc g     F .text	00000050 jogo_iniciar
00009148 g     F .text	00000058 getBTN
00008ec4 g     F .text	000000a4 jogo_loop
0000ae4c g     F .text	00000024 altera_nios2_gen2_irq_init
00009830 g     F .text	000000a8 __sfvwrite_small_str
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000bc14 g     O .bss	00000004 errno
00008d18 g     F .text	00000048 jogo_setar_pads
0000bc0c g     O .bss	00000004 alt_argv
000138a0 g       *ABS*	00000000 _gp
00009ef0 g     F .text	00000030 usleep
0000bc28 g     O .bss	00000020 pads
0000b8b4 g     O .rwdata	00000008 pAnt
0000b720 g     O .rwdata	00000180 alt_fd_list
0000a934 g     F .text	00000090 alt_find_dev
0000819c g     F .text	00000118 initLCD
0000aac8 g     F .text	0000007c alt_io_redirect
0000b8a4 g     O .rwdata	00000004 anaUm
0000a3c8 g     F .text	00000074 alt_up_rs232_read_data
0000a08c g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00009a4c g     F .text	00000064 .hidden __udivsi3
0000b8a0 g     O .rwdata	00000004 btn_atual
00008e44 g     F .text	00000030 jogo_parar
0000b8d4 g     O .rwdata	00000004 alt_max_fd
0000a344 g     F .text	00000044 alt_up_rs232_check_parity
00008368 g     F .text	00000074 setPosition
0000805c g     F .text	000000d8 writeLCD
0000b8bc g     O .rwdata	00000004 _global_impure_ptr
0000bc70 g       *ABS*	00000000 __bss_end
00008728 g     F .text	00000044 valor_aleat
0000b6f8 g     O .rwdata	00000028 alt_dev_null
0000a808 g     F .text	00000020 alt_dcache_flush_all
00008e74 g     F .text	00000030 jogo_resume_pause
0000b8dc g       *ABS*	00000000 __ram_rwdata_end
0000b8cc g     O .rwdata	00000008 alt_dev_list
0000b448 g     F .text	00000100 write
0000b0e0 g     F .text	00000058 _putc_r
0000b8ac g     O .rwdata	00000004 ondeUm
0000b5c0 g       *ABS*	00000000 __ram_rodata_end
0000a4cc g     F .text	00000094 alt_up_rs232_write_fd
00008594 g     F .text	00000030 buzzerPausa
00008ad8 g     F .text	000000f4 jogo_set_inicio
00009ab0 g     F .text	00000058 .hidden __umodsi3
0000bc70 g       *ABS*	00000000 end
0000b8b0 g     O .rwdata	00000004 ondeDois
0000d000 g       *ABS*	00000000 __alt_stack_pointer
0000a178 g     F .text	00000094 altera_avalon_jtag_uart_write
0000bc04 g     O .bss	00000004 exec
000091a0 g     F .text	00000064 _sprintf_r
00009c88 g     F .text	0000022c alt_printf
0000b138 g     F .text	00000190 __call_exitprocs
00008020 g     F .text	0000003c _start
0000bc48 g     O .bss	00000018 bola
00009f8c g     F .text	00000040 alt_sys_init
0000a308 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0000b8a8 g     O .rwdata	00000004 anaDois
00009b08 g     F .text	00000028 .hidden __mulsi3
0000b5c0 g       *ABS*	00000000 __ram_rwdata_start
0000b548 g       *ABS*	00000000 __ram_rodata_start
00008134 g     F .text	00000068 clearLCD
00009fcc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000af78 g     F .text	000000c4 alt_get_fd
0000a59c g     F .text	00000158 alt_busy_sleep
0000b05c g     F .text	00000030 memcmp
0000bc70 g       *ABS*	00000000 __alt_stack_base
0000bbf8 g     O .bss	00000004 contador
0000a268 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0000ae70 g     F .text	00000108 alt_find_file
0000a890 g     F .text	000000a4 alt_dev_llist_insert
000092e8 g     F .text	0000052c ___svfprintf_internal_r
0000b2c8 g     F .text	000000b8 __sfvwrite_small_dev
0000bbf8 g       *ABS*	00000000 __bss_start
00008c1c g     F .text	000000fc jogo_reset_pontos
00008f68 g     F .text	000001e0 main
000083dc g     F .text	000001b8 converteAna
0000bc10 g     O .bss	00000004 alt_envp
0000a02c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000082b4 g     F .text	0000005c lcd_setPontos
0000b8d8 g     O .rwdata	00000004 alt_errno
0000b08c g     F .text	00000054 putc
00009954 g     F .text	00000084 .hidden __divsi3
00008310 g     F .text	00000058 get_charar
0000b548 g       *ABS*	00000000 __flash_rodata_start
0000a560 g     F .text	0000003c alt_up_rs232_open_dev
00009f54 g     F .text	00000038 alt_irq_init
0000adc8 g     F .text	00000084 alt_release_fd
00009204 g     F .text	00000078 sprintf
0000b380 g     F .text	00000058 _write_r
0000b8c0 g     O .rwdata	00000004 _impure_ptr
0000bc08 g     O .bss	00000004 alt_argc
0000b8c4 g     O .rwdata	00000008 alt_fs_list
00009814 g     F .text	0000001c __vfprintf_internal_unused
0000a20c g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000876c g     F .text	0000036c move_bola
0000a388 g     F .text	00000040 alt_up_rs232_write_data
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008e24 g     F .text	00000020 jogo_pegar_pontos
0000bbfc g     O .bss	00000008 pontos
0000b8dc g       *ABS*	00000000 _edata
0000bc70 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000bc60 g     O .bss	0000000d str
0000b03c g     F .text	00000020 exit
00008d60 g     F .text	000000c4 set_position
000099d8 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008ea4 g     F .text	00000020 jogo_isExec
0000b3d8 g     F .text	00000034 _exit
00009938 g     F .text	0000001c strlen
0000ac6c g     F .text	0000015c open
00009eb4 g     F .text	0000003c alt_putchar
0000a9c4 g     F .text	00000020 alt_icache_flush_all
000085c4 g     F .text	00000050 buzzerPlay
0000a2c8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
0000a730 g     F .text	000000d8 close
00009b98 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68e2814 	ori	gp,gp,14496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10aefe14 	ori	r2,r2,48120

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ef1c14 	ori	r3,r3,48240

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff47a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0009b980 	call	9b98 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0009c1c0 	call	9c1c <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff47b8>

0000805c <writeLCD>:
#define DELAY 1000

char str[13];


void writeLCD(char str[]){
    805c:	defffb04 	addi	sp,sp,-20
    8060:	dfc00415 	stw	ra,16(sp)
    8064:	df000315 	stw	fp,12(sp)
    8068:	df000304 	addi	fp,sp,12
    806c:	e13fff15 	stw	r4,-4(fp)
	int c = (0x3 << 9) ;
    8070:	00818004 	movi	r2,1536
    8074:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
    8078:	e03ffe15 	stw	zero,-8(fp)
	while(str[i] != '\0'){
    807c:	00001f06 	br	80fc <writeLCD+0xa0>
		c  |= str[i];
    8080:	e0bffe17 	ldw	r2,-8(fp)
    8084:	e0ffff17 	ldw	r3,-4(fp)
    8088:	1885883a 	add	r2,r3,r2
    808c:	10800003 	ldbu	r2,0(r2)
    8090:	10803fcc 	andi	r2,r2,255
    8094:	1080201c 	xori	r2,r2,128
    8098:	10bfe004 	addi	r2,r2,-128
    809c:	e0fffd17 	ldw	r3,-12(fp)
    80a0:	1884b03a 	or	r2,r3,r2
    80a4:	e0bffd15 	stw	r2,-12(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, c);
    80a8:	00800074 	movhi	r2,1
    80ac:	10841004 	addi	r2,r2,4160
    80b0:	e0fffd17 	ldw	r3,-12(fp)
    80b4:	10c00035 	stwio	r3,0(r2)
		usleep(DELAY);
    80b8:	0100fa04 	movi	r4,1000
    80bc:	0009ef00 	call	9ef0 <usleep>
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, str[i]);
    80c0:	e0bffe17 	ldw	r2,-8(fp)
    80c4:	e0ffff17 	ldw	r3,-4(fp)
    80c8:	1885883a 	add	r2,r3,r2
    80cc:	10800003 	ldbu	r2,0(r2)
    80d0:	10c03fcc 	andi	r3,r2,255
    80d4:	18c0201c 	xori	r3,r3,128
    80d8:	18ffe004 	addi	r3,r3,-128
    80dc:	00800074 	movhi	r2,1
    80e0:	10841004 	addi	r2,r2,4160
    80e4:	10c00035 	stwio	r3,0(r2)
		i++;
    80e8:	e0bffe17 	ldw	r2,-8(fp)
    80ec:	10800044 	addi	r2,r2,1
    80f0:	e0bffe15 	stw	r2,-8(fp)
		c = (0x3 << 9) ;
    80f4:	00818004 	movi	r2,1536
    80f8:	e0bffd15 	stw	r2,-12(fp)


void writeLCD(char str[]){
	int c = (0x3 << 9) ;
	int i = 0;
	while(str[i] != '\0'){
    80fc:	e0bffe17 	ldw	r2,-8(fp)
    8100:	e0ffff17 	ldw	r3,-4(fp)
    8104:	1885883a 	add	r2,r3,r2
    8108:	10800003 	ldbu	r2,0(r2)
    810c:	10803fcc 	andi	r2,r2,255
    8110:	1080201c 	xori	r2,r2,128
    8114:	10bfe004 	addi	r2,r2,-128
    8118:	103fd91e 	bne	r2,zero,8080 <_gp+0xffff47e0>
		usleep(DELAY);
		IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, str[i]);
		i++;
		c = (0x3 << 9) ;
	}
}
    811c:	0001883a 	nop
    8120:	e037883a 	mov	sp,fp
    8124:	dfc00117 	ldw	ra,4(sp)
    8128:	df000017 	ldw	fp,0(sp)
    812c:	dec00204 	addi	sp,sp,8
    8130:	f800283a 	ret

00008134 <clearLCD>:

void clearLCD(){
    8134:	defffd04 	addi	sp,sp,-12
    8138:	dfc00215 	stw	ra,8(sp)
    813c:	df000115 	stw	fp,4(sp)
    8140:	df000104 	addi	fp,sp,4
	usleep(DELAY);
    8144:	0100fa04 	movi	r4,1000
    8148:	0009ef00 	call	9ef0 <usleep>
	int send = 1025;
    814c:	00810044 	movi	r2,1025
    8150:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    8154:	00800074 	movhi	r2,1
    8158:	10841004 	addi	r2,r2,4160
    815c:	e0ffff17 	ldw	r3,-4(fp)
    8160:	10c00035 	stwio	r3,0(r2)
	usleep(DELAY);
    8164:	0100fa04 	movi	r4,1000
    8168:	0009ef00 	call	9ef0 <usleep>
	send = 1;
    816c:	00800044 	movi	r2,1
    8170:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    8174:	00800074 	movhi	r2,1
    8178:	10841004 	addi	r2,r2,4160
    817c:	e0ffff17 	ldw	r3,-4(fp)
    8180:	10c00035 	stwio	r3,0(r2)
}
    8184:	0001883a 	nop
    8188:	e037883a 	mov	sp,fp
    818c:	dfc00117 	ldw	ra,4(sp)
    8190:	df000017 	ldw	fp,0(sp)
    8194:	dec00204 	addi	sp,sp,8
    8198:	f800283a 	ret

0000819c <initLCD>:


void initLCD(){
    819c:	defffd04 	addi	sp,sp,-12
    81a0:	dfc00215 	stw	ra,8(sp)
    81a4:	df000115 	stw	fp,4(sp)
    81a8:	df000104 	addi	fp,sp,4
	int send = 1072;
    81ac:	00810c04 	movi	r2,1072
    81b0:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    81b4:	00800074 	movhi	r2,1
    81b8:	10841004 	addi	r2,r2,4160
    81bc:	e0ffff17 	ldw	r3,-4(fp)
    81c0:	10c00035 	stwio	r3,0(r2)
	usleep(DELAY);
    81c4:	0100fa04 	movi	r4,1000
    81c8:	0009ef00 	call	9ef0 <usleep>
	send = 48;
    81cc:	00800c04 	movi	r2,48
    81d0:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    81d4:	00800074 	movhi	r2,1
    81d8:	10841004 	addi	r2,r2,4160
    81dc:	e0ffff17 	ldw	r3,-4(fp)
    81e0:	10c00035 	stwio	r3,0(r2)
	usleep(DELAY);
    81e4:	0100fa04 	movi	r4,1000
    81e8:	0009ef00 	call	9ef0 <usleep>
	send = 1036;
    81ec:	00810304 	movi	r2,1036
    81f0:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    81f4:	00800074 	movhi	r2,1
    81f8:	10841004 	addi	r2,r2,4160
    81fc:	e0ffff17 	ldw	r3,-4(fp)
    8200:	10c00035 	stwio	r3,0(r2)
	usleep(DELAY);
    8204:	0100fa04 	movi	r4,1000
    8208:	0009ef00 	call	9ef0 <usleep>
	send = 12;
    820c:	00800304 	movi	r2,12
    8210:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    8214:	00800074 	movhi	r2,1
    8218:	10841004 	addi	r2,r2,4160
    821c:	e0ffff17 	ldw	r3,-4(fp)
    8220:	10c00035 	stwio	r3,0(r2)
	usleep(DELAY);
    8224:	0100fa04 	movi	r4,1000
    8228:	0009ef00 	call	9ef0 <usleep>
	send = 1025;
    822c:	00810044 	movi	r2,1025
    8230:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    8234:	00800074 	movhi	r2,1
    8238:	10841004 	addi	r2,r2,4160
    823c:	e0ffff17 	ldw	r3,-4(fp)
    8240:	10c00035 	stwio	r3,0(r2)
	usleep(DELAY);
    8244:	0100fa04 	movi	r4,1000
    8248:	0009ef00 	call	9ef0 <usleep>
	send = 1;
    824c:	00800044 	movi	r2,1
    8250:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    8254:	00800074 	movhi	r2,1
    8258:	10841004 	addi	r2,r2,4160
    825c:	e0ffff17 	ldw	r3,-4(fp)
    8260:	10c00035 	stwio	r3,0(r2)
	send = 1030;
    8264:	00810184 	movi	r2,1030
    8268:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    826c:	00800074 	movhi	r2,1
    8270:	10841004 	addi	r2,r2,4160
    8274:	e0ffff17 	ldw	r3,-4(fp)
    8278:	10c00035 	stwio	r3,0(r2)
	usleep(DELAY);
    827c:	0100fa04 	movi	r4,1000
    8280:	0009ef00 	call	9ef0 <usleep>
	send = 6;
    8284:	00800184 	movi	r2,6
    8288:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, send);
    828c:	00800074 	movhi	r2,1
    8290:	10841004 	addi	r2,r2,4160
    8294:	e0ffff17 	ldw	r3,-4(fp)
    8298:	10c00035 	stwio	r3,0(r2)
}
    829c:	0001883a 	nop
    82a0:	e037883a 	mov	sp,fp
    82a4:	dfc00117 	ldw	ra,4(sp)
    82a8:	df000017 	ldw	fp,0(sp)
    82ac:	dec00204 	addi	sp,sp,8
    82b0:	f800283a 	ret

000082b4 <lcd_setPontos>:

void lcd_setPontos(int p0, int p1){
    82b4:	defffc04 	addi	sp,sp,-16
    82b8:	dfc00315 	stw	ra,12(sp)
    82bc:	df000215 	stw	fp,8(sp)
    82c0:	df000204 	addi	fp,sp,8
    82c4:	e13ffe15 	stw	r4,-8(fp)
    82c8:	e17fff15 	stw	r5,-4(fp)
	clearLCD();
    82cc:	00081340 	call	8134 <clearLCD>
	sprintf(str, "PLC: %d X %d\0", p0, p1);
    82d0:	e1ffff17 	ldw	r7,-4(fp)
    82d4:	e1bffe17 	ldw	r6,-8(fp)
    82d8:	01400074 	movhi	r5,1
    82dc:	296d5204 	addi	r5,r5,-19128
    82e0:	01000074 	movhi	r4,1
    82e4:	212f1804 	addi	r4,r4,-17312
    82e8:	00092040 	call	9204 <sprintf>
	writeLCD(str);
    82ec:	01000074 	movhi	r4,1
    82f0:	212f1804 	addi	r4,r4,-17312
    82f4:	000805c0 	call	805c <writeLCD>
}
    82f8:	0001883a 	nop
    82fc:	e037883a 	mov	sp,fp
    8300:	dfc00117 	ldw	ra,4(sp)
    8304:	df000017 	ldw	fp,0(sp)
    8308:	dec00204 	addi	sp,sp,8
    830c:	f800283a 	ret

00008310 <get_charar>:
#define __MOVIMENTO_H_
#include "system.h"
#include <stdlib.h>


char get_charar( void ){
    8310:	defffc04 	addi	sp,sp,-16
    8314:	df000315 	stw	fp,12(sp)
    8318:	df000304 	addi	fp,sp,12
	volatile int * RS232_UART_ptr = (int *) RS232_0_BASE; // RS232 UART address
    831c:	00800074 	movhi	r2,1
    8320:	10841c04 	addi	r2,r2,4208
    8324:	e0bffd15 	stw	r2,-12(fp)
	int data;
	data = *(RS232_UART_ptr); // read the RS232_UART data register
    8328:	e0bffd17 	ldw	r2,-12(fp)
    832c:	10800017 	ldw	r2,0(r2)
    8330:	e0bffe15 	stw	r2,-8(fp)
	if (data & 0x00008000){ // check RVALID to see if there is new data
    8334:	e0bffe17 	ldw	r2,-8(fp)
    8338:	10a0000c 	andi	r2,r2,32768
    833c:	10000426 	beq	r2,zero,8350 <get_charar+0x40>
		char result = (char) data & 0xFF;
    8340:	e0bffe17 	ldw	r2,-8(fp)
    8344:	e0bfff05 	stb	r2,-4(fp)
		return result;
    8348:	e0bfff03 	ldbu	r2,-4(fp)
    834c:	00000206 	br	8358 <get_charar+0x48>
	}
	else{
		char nada = '\0';
    8350:	e03fff45 	stb	zero,-3(fp)
		return nada;
    8354:	e0bfff43 	ldbu	r2,-3(fp)
	}
}
    8358:	e037883a 	mov	sp,fp
    835c:	df000017 	ldw	fp,0(sp)
    8360:	dec00104 	addi	sp,sp,4
    8364:	f800283a 	ret

00008368 <setPosition>:


void setPosition(int v_p1, int v_p2, int x_b, int y_b){
    8368:	defff904 	addi	sp,sp,-28
    836c:	df000615 	stw	fp,24(sp)
    8370:	df000604 	addi	fp,sp,24
    8374:	e13ffc15 	stw	r4,-16(fp)
    8378:	e17ffd15 	stw	r5,-12(fp)
    837c:	e1bffe15 	stw	r6,-8(fp)
    8380:	e1ffff15 	stw	r7,-4(fp)
	long int dataa, datab;
	dataa = v_p1;
    8384:	e0bffc17 	ldw	r2,-16(fp)
    8388:	e0bffa15 	stw	r2,-24(fp)
	dataa |= (v_p2 << 16);
    838c:	e0bffd17 	ldw	r2,-12(fp)
    8390:	1004943a 	slli	r2,r2,16
    8394:	e0fffa17 	ldw	r3,-24(fp)
    8398:	1884b03a 	or	r2,r3,r2
    839c:	e0bffa15 	stw	r2,-24(fp)
	datab = y_b;
    83a0:	e0bfff17 	ldw	r2,-4(fp)
    83a4:	e0bffb15 	stw	r2,-20(fp)
	datab |= (x_b << 16);
    83a8:	e0bffe17 	ldw	r2,-8(fp)
    83ac:	1004943a 	slli	r2,r2,16
    83b0:	e0fffb17 	ldw	r3,-20(fp)
    83b4:	1884b03a 	or	r2,r3,r2
    83b8:	e0bffb15 	stw	r2,-20(fp)
	ALT_CI_VGA(dataa, datab);
    83bc:	e0bffa17 	ldw	r2,-24(fp)
    83c0:	e0fffb17 	ldw	r3,-20(fp)
    83c4:	10c5c072 	custom	1,r2,r2,r3

}
    83c8:	0001883a 	nop
    83cc:	e037883a 	mov	sp,fp
    83d0:	df000017 	ldw	fp,0(sp)
    83d4:	dec00104 	addi	sp,sp,4
    83d8:	f800283a 	ret

000083dc <converteAna>:

void converteAna(int* anaUm, int* anaDois){
    83dc:	defff704 	addi	sp,sp,-36
    83e0:	dfc00815 	stw	ra,32(sp)
    83e4:	df000715 	stw	fp,28(sp)
    83e8:	df000704 	addi	fp,sp,28
    83ec:	e13ffe15 	stw	r4,-8(fp)
    83f0:	e17fff15 	stw	r5,-4(fp)
	int bolo = 0;
    83f4:	e03ff915 	stw	zero,-28(fp)
	int vai = -1;
    83f8:	00bfffc4 	movi	r2,-1
    83fc:	e0bffa15 	stw	r2,-24(fp)
	int vae = -1;
    8400:	00bfffc4 	movi	r2,-1
    8404:	e0bffb15 	stw	r2,-20(fp)
	//char va[9];
	char v;
	int i = 0;
    8408:	e03ffc15 	stw	zero,-16(fp)
	//char h, y;
	v = get_charar();
    840c:	00083100 	call	8310 <get_charar>
    8410:	e0bffd05 	stb	r2,-12(fp)
			bolo = 5;
		}
		v = get_charar();
		i++;
	}*/
	if(v == 'a'){
    8414:	e0bffd07 	ldb	r2,-12(fp)
    8418:	10801858 	cmpnei	r2,r2,97
    841c:	1000051e 	bne	r2,zero,8434 <converteAna+0x58>
		*anaUm = 0;
    8420:	e0bffe17 	ldw	r2,-8(fp)
    8424:	10000015 	stw	zero,0(r2)
		*anaDois = 0;
    8428:	e0bfff17 	ldw	r2,-4(fp)
    842c:	10000015 	stw	zero,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    8430:	00005206 	br	857c <converteAna+0x1a0>
		i++;
	}*/
	if(v == 'a'){
		*anaUm = 0;
		*anaDois = 0;
	}else if(v == 'b'){
    8434:	e0bffd07 	ldb	r2,-12(fp)
    8438:	10801898 	cmpnei	r2,r2,98
    843c:	1000061e 	bne	r2,zero,8458 <converteAna+0x7c>
		*anaUm = 0;
    8440:	e0bffe17 	ldw	r2,-8(fp)
    8444:	10000015 	stw	zero,0(r2)
		*anaDois = 1;
    8448:	e0bfff17 	ldw	r2,-4(fp)
    844c:	00c00044 	movi	r3,1
    8450:	10c00015 	stw	r3,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    8454:	00004906 	br	857c <converteAna+0x1a0>
		*anaUm = 0;
		*anaDois = 0;
	}else if(v == 'b'){
		*anaUm = 0;
		*anaDois = 1;
	}else if(v == 'c'){
    8458:	e0bffd07 	ldb	r2,-12(fp)
    845c:	108018d8 	cmpnei	r2,r2,99
    8460:	1000061e 	bne	r2,zero,847c <converteAna+0xa0>
		*anaUm = 1;
    8464:	e0bffe17 	ldw	r2,-8(fp)
    8468:	00c00044 	movi	r3,1
    846c:	10c00015 	stw	r3,0(r2)
		*anaDois = 0;
    8470:	e0bfff17 	ldw	r2,-4(fp)
    8474:	10000015 	stw	zero,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    8478:	00004006 	br	857c <converteAna+0x1a0>
		*anaUm = 0;
		*anaDois = 1;
	}else if(v == 'c'){
		*anaUm = 1;
		*anaDois = 0;
	}else if(v == 'd'){
    847c:	e0bffd07 	ldb	r2,-12(fp)
    8480:	10801918 	cmpnei	r2,r2,100
    8484:	1000071e 	bne	r2,zero,84a4 <converteAna+0xc8>
		*anaUm = 1;
    8488:	e0bffe17 	ldw	r2,-8(fp)
    848c:	00c00044 	movi	r3,1
    8490:	10c00015 	stw	r3,0(r2)
		*anaDois = 1;
    8494:	e0bfff17 	ldw	r2,-4(fp)
    8498:	00c00044 	movi	r3,1
    849c:	10c00015 	stw	r3,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    84a0:	00003606 	br	857c <converteAna+0x1a0>
		*anaUm = 1;
		*anaDois = 0;
	}else if(v == 'd'){
		*anaUm = 1;
		*anaDois = 1;
	}else if(v == 'e'){
    84a4:	e0bffd07 	ldb	r2,-12(fp)
    84a8:	10801958 	cmpnei	r2,r2,101
    84ac:	1000071e 	bne	r2,zero,84cc <converteAna+0xf0>
		*anaUm = 2;
    84b0:	e0bffe17 	ldw	r2,-8(fp)
    84b4:	00c00084 	movi	r3,2
    84b8:	10c00015 	stw	r3,0(r2)
		*anaDois = 2;
    84bc:	e0bfff17 	ldw	r2,-4(fp)
    84c0:	00c00084 	movi	r3,2
    84c4:	10c00015 	stw	r3,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    84c8:	00002c06 	br	857c <converteAna+0x1a0>
		*anaUm = 1;
		*anaDois = 1;
	}else if(v == 'e'){
		*anaUm = 2;
		*anaDois = 2;
	}else if(v == 'f'){
    84cc:	e0bffd07 	ldb	r2,-12(fp)
    84d0:	10801998 	cmpnei	r2,r2,102
    84d4:	1000061e 	bne	r2,zero,84f0 <converteAna+0x114>
		*anaUm = 0;
    84d8:	e0bffe17 	ldw	r2,-8(fp)
    84dc:	10000015 	stw	zero,0(r2)
		*anaDois = 2;
    84e0:	e0bfff17 	ldw	r2,-4(fp)
    84e4:	00c00084 	movi	r3,2
    84e8:	10c00015 	stw	r3,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    84ec:	00002306 	br	857c <converteAna+0x1a0>
		*anaUm = 2;
		*anaDois = 2;
	}else if(v == 'f'){
		*anaUm = 0;
		*anaDois = 2;
	}else if(v == 'g'){
    84f0:	e0bffd07 	ldb	r2,-12(fp)
    84f4:	108019d8 	cmpnei	r2,r2,103
    84f8:	1000061e 	bne	r2,zero,8514 <converteAna+0x138>
		*anaUm = 2;
    84fc:	e0bffe17 	ldw	r2,-8(fp)
    8500:	00c00084 	movi	r3,2
    8504:	10c00015 	stw	r3,0(r2)
		*anaDois = 0;
    8508:	e0bfff17 	ldw	r2,-4(fp)
    850c:	10000015 	stw	zero,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    8510:	00001a06 	br	857c <converteAna+0x1a0>
		*anaUm = 0;
		*anaDois = 2;
	}else if(v == 'g'){
		*anaUm = 2;
		*anaDois = 0;
	}else if(v == 'l'){
    8514:	e0bffd07 	ldb	r2,-12(fp)
    8518:	10801b18 	cmpnei	r2,r2,108
    851c:	1000071e 	bne	r2,zero,853c <converteAna+0x160>
		*anaUm = 2;
    8520:	e0bffe17 	ldw	r2,-8(fp)
    8524:	00c00084 	movi	r3,2
    8528:	10c00015 	stw	r3,0(r2)
		*anaDois = 1;
    852c:	e0bfff17 	ldw	r2,-4(fp)
    8530:	00c00044 	movi	r3,1
    8534:	10c00015 	stw	r3,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    8538:	00001006 	br	857c <converteAna+0x1a0>
		*anaUm = 2;
		*anaDois = 0;
	}else if(v == 'l'){
		*anaUm = 2;
		*anaDois = 1;
	}else if(v == 'm'){
    853c:	e0bffd07 	ldb	r2,-12(fp)
    8540:	10801b58 	cmpnei	r2,r2,109
    8544:	1000071e 	bne	r2,zero,8564 <converteAna+0x188>
		*anaUm = 1;
    8548:	e0bffe17 	ldw	r2,-8(fp)
    854c:	00c00044 	movi	r3,1
    8550:	10c00015 	stw	r3,0(r2)
		*anaDois = 2;
    8554:	e0bfff17 	ldw	r2,-4(fp)
    8558:	00c00084 	movi	r3,2
    855c:	10c00015 	stw	r3,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    8560:	00000606 	br	857c <converteAna+0x1a0>
		*anaDois = 1;
	}else if(v == 'm'){
		*anaUm = 1;
		*anaDois = 2;
	}else{
		*anaUm = 1;
    8564:	e0bffe17 	ldw	r2,-8(fp)
    8568:	00c00044 	movi	r3,1
    856c:	10c00015 	stw	r3,0(r2)
		*anaDois = 1;
    8570:	e0bfff17 	ldw	r2,-4(fp)
    8574:	00c00044 	movi	r3,1
    8578:	10c00015 	stw	r3,0(r2)
		}else{
	 *anaUm = 1;
		}

	}*/
}
    857c:	0001883a 	nop
    8580:	e037883a 	mov	sp,fp
    8584:	dfc00117 	ldw	ra,4(sp)
    8588:	df000017 	ldw	fp,0(sp)
    858c:	dec00204 	addi	sp,sp,8
    8590:	f800283a 	ret

00008594 <buzzerPausa>:
#define BUZZER_H_

#include "altera_avalon_pio_regs.h"


void buzzerPausa(){
    8594:	deffff04 	addi	sp,sp,-4
    8598:	df000015 	stw	fp,0(sp)
    859c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_BUZZER_BASE, 1);
    85a0:	00c00044 	movi	r3,1
    85a4:	00800074 	movhi	r2,1
    85a8:	10840c04 	addi	r2,r2,4144
    85ac:	10c00035 	stwio	r3,0(r2)
}
    85b0:	0001883a 	nop
    85b4:	e037883a 	mov	sp,fp
    85b8:	df000017 	ldw	fp,0(sp)
    85bc:	dec00104 	addi	sp,sp,4
    85c0:	f800283a 	ret

000085c4 <buzzerPlay>:

void buzzerPlay(){
    85c4:	defffe04 	addi	sp,sp,-8
    85c8:	dfc00115 	stw	ra,4(sp)
    85cc:	df000015 	stw	fp,0(sp)
    85d0:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_BUZZER_BASE, 0);
    85d4:	0007883a 	mov	r3,zero
    85d8:	00800074 	movhi	r2,1
    85dc:	10840c04 	addi	r2,r2,4144
    85e0:	10c00035 	stwio	r3,0(r2)
	usleep(50000);
    85e4:	0130d414 	movui	r4,50000
    85e8:	0009ef00 	call	9ef0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_BUZZER_BASE, 1);
    85ec:	00c00044 	movi	r3,1
    85f0:	00800074 	movhi	r2,1
    85f4:	10840c04 	addi	r2,r2,4144
    85f8:	10c00035 	stwio	r3,0(r2)
}
    85fc:	0001883a 	nop
    8600:	e037883a 	mov	sp,fp
    8604:	dfc00117 	ldw	ra,4(sp)
    8608:	df000017 	ldw	fp,0(sp)
    860c:	dec00204 	addi	sp,sp,8
    8610:	f800283a 	ret

00008614 <verifica_colisao>:
void jogo_setar_pads(int, int);
void set_position(int, int, int, int);
int* jogo_pegar_pontos();
void jogo_loop();

int verifica_colisao(bola_t a, pad_t b){
    8614:	defff304 	addi	sp,sp,-52
    8618:	df000815 	stw	fp,32(sp)
    861c:	df000804 	addi	fp,sp,32
    8620:	e1000115 	stw	r4,4(fp)
    8624:	e1400215 	stw	r5,8(fp)
    8628:	e1800315 	stw	r6,12(fp)
    862c:	e1c00415 	stw	r7,16(fp)
	int esq_a, esq_b;
	int dir_a, dir_b;
	int topo_a, topo_b;
	int base_a, base_b;

	esq_a = a.x;
    8630:	e0800117 	ldw	r2,4(fp)
    8634:	e0bff815 	stw	r2,-32(fp)
	dir_a = a.x + a.l;
    8638:	e0c00117 	ldw	r3,4(fp)
    863c:	e0800317 	ldw	r2,12(fp)
    8640:	1885883a 	add	r2,r3,r2
    8644:	e0bff915 	stw	r2,-28(fp)
	topo_a = a.y + a.l/2;
    8648:	e0c00217 	ldw	r3,8(fp)
    864c:	e0800317 	ldw	r2,12(fp)
    8650:	1008d7fa 	srli	r4,r2,31
    8654:	2085883a 	add	r2,r4,r2
    8658:	1005d07a 	srai	r2,r2,1
    865c:	1885883a 	add	r2,r3,r2
    8660:	e0bffa15 	stw	r2,-24(fp)
	base_a = a.y + a.a;
    8664:	e0c00217 	ldw	r3,8(fp)
    8668:	e0800417 	ldw	r2,16(fp)
    866c:	1885883a 	add	r2,r3,r2
    8670:	e0bffb15 	stw	r2,-20(fp)

	esq_b = b.x;
    8674:	e0800717 	ldw	r2,28(fp)
    8678:	e0bffc15 	stw	r2,-16(fp)
	dir_b = b.x + b.l;
    867c:	e0c00717 	ldw	r3,28(fp)
    8680:	e0800917 	ldw	r2,36(fp)
    8684:	1885883a 	add	r2,r3,r2
    8688:	e0bffd15 	stw	r2,-12(fp)
	topo_b = b.y;
    868c:	e0800817 	ldw	r2,32(fp)
    8690:	e0bffe15 	stw	r2,-8(fp)
	base_b = b.y + b.a;
    8694:	e0c00817 	ldw	r3,32(fp)
    8698:	e0800a17 	ldw	r2,40(fp)
    869c:	1885883a 	add	r2,r3,r2
    86a0:	e0bfff15 	stw	r2,-4(fp)


	if (dir_a > esq_b && dir_a < dir_b && topo_a > topo_b && topo_a < base_b) {
    86a4:	e0bff917 	ldw	r2,-28(fp)
    86a8:	e0fffc17 	ldw	r3,-16(fp)
    86ac:	18800b0e 	bge	r3,r2,86dc <verifica_colisao+0xc8>
    86b0:	e0fff917 	ldw	r3,-28(fp)
    86b4:	e0bffd17 	ldw	r2,-12(fp)
    86b8:	1880080e 	bge	r3,r2,86dc <verifica_colisao+0xc8>
    86bc:	e0bffa17 	ldw	r2,-24(fp)
    86c0:	e0fffe17 	ldw	r3,-8(fp)
    86c4:	1880050e 	bge	r3,r2,86dc <verifica_colisao+0xc8>
    86c8:	e0fffa17 	ldw	r3,-24(fp)
    86cc:	e0bfff17 	ldw	r2,-4(fp)
    86d0:	1880020e 	bge	r3,r2,86dc <verifica_colisao+0xc8>
		return 1;
    86d4:	00800044 	movi	r2,1
    86d8:	00000f06 	br	8718 <verifica_colisao+0x104>
	}

	if (esq_a < dir_b && esq_a > esq_b && topo_a > topo_b && topo_a < base_b) {
    86dc:	e0fff817 	ldw	r3,-32(fp)
    86e0:	e0bffd17 	ldw	r2,-12(fp)
    86e4:	18800b0e 	bge	r3,r2,8714 <verifica_colisao+0x100>
    86e8:	e0bff817 	ldw	r2,-32(fp)
    86ec:	e0fffc17 	ldw	r3,-16(fp)
    86f0:	1880080e 	bge	r3,r2,8714 <verifica_colisao+0x100>
    86f4:	e0bffa17 	ldw	r2,-24(fp)
    86f8:	e0fffe17 	ldw	r3,-8(fp)
    86fc:	1880050e 	bge	r3,r2,8714 <verifica_colisao+0x100>
    8700:	e0fffa17 	ldw	r3,-24(fp)
    8704:	e0bfff17 	ldw	r2,-4(fp)
    8708:	1880020e 	bge	r3,r2,8714 <verifica_colisao+0x100>
		return 1;
    870c:	00800044 	movi	r2,1
    8710:	00000106 	br	8718 <verifica_colisao+0x104>
	}

	return 0;
    8714:	0005883a 	mov	r2,zero
}
    8718:	e037883a 	mov	sp,fp
    871c:	df000017 	ldw	fp,0(sp)
    8720:	dec00504 	addi	sp,sp,20
    8724:	f800283a 	ret

00008728 <valor_aleat>:

int valor_aleat(){
    8728:	defffe04 	addi	sp,sp,-8
    872c:	df000115 	stw	fp,4(sp)
    8730:	df000104 	addi	fp,sp,4
	int v;
	v = contador;
    8734:	d0a0d617 	ldw	r2,-31912(gp)
    8738:	e0bfff15 	stw	r2,-4(fp)
	v = (v == 2) ? -1 : v;
    873c:	e0bfff17 	ldw	r2,-4(fp)
    8740:	108000a0 	cmpeqi	r2,r2,2
    8744:	1000021e 	bne	r2,zero,8750 <valor_aleat+0x28>
    8748:	e0bfff17 	ldw	r2,-4(fp)
    874c:	00000106 	br	8754 <valor_aleat+0x2c>
    8750:	00bfffc4 	movi	r2,-1
    8754:	e0bfff15 	stw	r2,-4(fp)
	return v;
    8758:	e0bfff17 	ldw	r2,-4(fp)
}
    875c:	e037883a 	mov	sp,fp
    8760:	df000017 	ldw	fp,0(sp)
    8764:	dec00104 	addi	sp,sp,4
    8768:	f800283a 	ret

0000876c <move_bola>:

void move_bola(){
    876c:	defff504 	addi	sp,sp,-44
    8770:	dfc00a15 	stw	ra,40(sp)
    8774:	df000915 	stw	fp,36(sp)
    8778:	df000904 	addi	fp,sp,36
	bola.x += bola.dx;					// Incrementa a posição da bola
    877c:	00800074 	movhi	r2,1
    8780:	10af1204 	addi	r2,r2,-17336
    8784:	10c00017 	ldw	r3,0(r2)
    8788:	00800074 	movhi	r2,1
    878c:	10af1204 	addi	r2,r2,-17336
    8790:	10800417 	ldw	r2,16(r2)
    8794:	1887883a 	add	r3,r3,r2
    8798:	00800074 	movhi	r2,1
    879c:	10af1204 	addi	r2,r2,-17336
    87a0:	10c00015 	stw	r3,0(r2)
	bola.y += bola.dy;
    87a4:	00800074 	movhi	r2,1
    87a8:	10af1204 	addi	r2,r2,-17336
    87ac:	10c00117 	ldw	r3,4(r2)
    87b0:	00800074 	movhi	r2,1
    87b4:	10af1204 	addi	r2,r2,-17336
    87b8:	10800517 	ldw	r2,20(r2)
    87bc:	1887883a 	add	r3,r3,r2
    87c0:	00800074 	movhi	r2,1
    87c4:	10af1204 	addi	r2,r2,-17336
    87c8:	10c00115 	stw	r3,4(r2)


	if(bola.y < LIMITE_SUPERIOR || (bola.y + bola.a) > LIMITE_INFERIOR){ // Testa se atingiu as paredes superiores e inferiores
    87cc:	00800074 	movhi	r2,1
    87d0:	10af1204 	addi	r2,r2,-17336
    87d4:	10800117 	ldw	r2,4(r2)
    87d8:	10800890 	cmplti	r2,r2,34
    87dc:	1000091e 	bne	r2,zero,8804 <move_bola+0x98>
    87e0:	00800074 	movhi	r2,1
    87e4:	10af1204 	addi	r2,r2,-17336
    87e8:	10c00117 	ldw	r3,4(r2)
    87ec:	00800074 	movhi	r2,1
    87f0:	10af1204 	addi	r2,r2,-17336
    87f4:	10800317 	ldw	r2,12(r2)
    87f8:	1885883a 	add	r2,r3,r2
    87fc:	108080d0 	cmplti	r2,r2,515
    8800:	1000081e 	bne	r2,zero,8824 <move_bola+0xb8>
		bola.dy = -bola.dy;		//Inveter o sentido da bola
    8804:	00800074 	movhi	r2,1
    8808:	10af1204 	addi	r2,r2,-17336
    880c:	10800517 	ldw	r2,20(r2)
    8810:	0087c83a 	sub	r3,zero,r2
    8814:	00800074 	movhi	r2,1
    8818:	10af1204 	addi	r2,r2,-17336
    881c:	10c00515 	stw	r3,20(r2)
		buzzerPlay();
    8820:	00085c40 	call	85c4 <buzzerPlay>
	}

	int i;

	for(i=0; i < 2; i++){
    8824:	e03ffd15 	stw	zero,-12(fp)
    8828:	0000a206 	br	8ab4 <move_bola+0x348>
		int c = verifica_colisao(bola, pads[i]); // Testa colisao
    882c:	00800074 	movhi	r2,1
    8830:	10af1204 	addi	r2,r2,-17336
    8834:	00c00074 	movhi	r3,1
    8838:	18ef0a04 	addi	r3,r3,-17368
    883c:	e13ffd17 	ldw	r4,-12(fp)
    8840:	2008913a 	slli	r4,r4,4
    8844:	1907883a 	add	r3,r3,r4
    8848:	19000017 	ldw	r4,0(r3)
    884c:	d9000215 	stw	r4,8(sp)
    8850:	19000117 	ldw	r4,4(r3)
    8854:	d9000315 	stw	r4,12(sp)
    8858:	19000217 	ldw	r4,8(r3)
    885c:	d9000415 	stw	r4,16(sp)
    8860:	18c00317 	ldw	r3,12(r3)
    8864:	d8c00515 	stw	r3,20(sp)
    8868:	10c00417 	ldw	r3,16(r2)
    886c:	d8c00015 	stw	r3,0(sp)
    8870:	10c00517 	ldw	r3,20(r2)
    8874:	d8c00115 	stw	r3,4(sp)
    8878:	11000017 	ldw	r4,0(r2)
    887c:	11400117 	ldw	r5,4(r2)
    8880:	11800217 	ldw	r6,8(r2)
    8884:	11c00317 	ldw	r7,12(r2)
    8888:	00086140 	call	8614 <verifica_colisao>
    888c:	e0bffe15 	stw	r2,-8(fp)
		if(c == 1){
    8890:	e0bffe17 	ldw	r2,-8(fp)
    8894:	10800058 	cmpnei	r2,r2,1
    8898:	1000601e 	bne	r2,zero,8a1c <move_bola+0x2b0>
			bola.dx = -bola.dx; // Muda a direção
    889c:	00800074 	movhi	r2,1
    88a0:	10af1204 	addi	r2,r2,-17336
    88a4:	10800417 	ldw	r2,16(r2)
    88a8:	0087c83a 	sub	r3,zero,r2
    88ac:	00800074 	movhi	r2,1
    88b0:	10af1204 	addi	r2,r2,-17336
    88b4:	10c00415 	stw	r3,16(r2)
			if((bola.dx < 0 ? -bola.dx: bola.dx) != VELOCIDADE)
    88b8:	00800074 	movhi	r2,1
    88bc:	10af1204 	addi	r2,r2,-17336
    88c0:	10800417 	ldw	r2,16(r2)
    88c4:	1000010e 	bge	r2,zero,88cc <move_bola+0x160>
    88c8:	0085c83a 	sub	r2,zero,r2
    88cc:	10800160 	cmpeqi	r2,r2,5
    88d0:	10000e1e 	bne	r2,zero,890c <move_bola+0x1a0>
				bola.dx += bola.dx < 0 ? -1 : 1;
    88d4:	00800074 	movhi	r2,1
    88d8:	10af1204 	addi	r2,r2,-17336
    88dc:	10c00417 	ldw	r3,16(r2)
    88e0:	00800074 	movhi	r2,1
    88e4:	10af1204 	addi	r2,r2,-17336
    88e8:	10800417 	ldw	r2,16(r2)
    88ec:	1000020e 	bge	r2,zero,88f8 <move_bola+0x18c>
    88f0:	00bfffc4 	movi	r2,-1
    88f4:	00000106 	br	88fc <move_bola+0x190>
    88f8:	00800044 	movi	r2,1
    88fc:	1887883a 	add	r3,r3,r2
    8900:	00800074 	movhi	r2,1
    8904:	10af1204 	addi	r2,r2,-17336
    8908:	10c00415 	stw	r3,16(r2)

			//************* AQUI FICA ANGULO POR AREA DE COLISAO *********
			int colisao_ponto = bola.y - pads[i].y;
    890c:	00800074 	movhi	r2,1
    8910:	10af1204 	addi	r2,r2,-17336
    8914:	10c00117 	ldw	r3,4(r2)
    8918:	00800074 	movhi	r2,1
    891c:	10af0a04 	addi	r2,r2,-17368
    8920:	e13ffd17 	ldw	r4,-12(fp)
    8924:	2008913a 	slli	r4,r4,4
    8928:	1105883a 	add	r2,r2,r4
    892c:	10800104 	addi	r2,r2,4
    8930:	10800017 	ldw	r2,0(r2)
    8934:	1885c83a 	sub	r2,r3,r2
    8938:	e0bfff15 	stw	r2,-4(fp)
			if (colisao_ponto >= 0 && colisao_ponto < 21) {
    893c:	e0bfff17 	ldw	r2,-4(fp)
    8940:	10000916 	blt	r2,zero,8968 <move_bola+0x1fc>
    8944:	e0bfff17 	ldw	r2,-4(fp)
    8948:	10800548 	cmpgei	r2,r2,21
    894c:	1000061e 	bne	r2,zero,8968 <move_bola+0x1fc>
				bola.dy = valor_aleat();
    8950:	00087280 	call	8728 <valor_aleat>
    8954:	1007883a 	mov	r3,r2
    8958:	00800074 	movhi	r2,1
    895c:	10af1204 	addi	r2,r2,-17336
    8960:	10c00515 	stw	r3,20(r2)
    8964:	00002b06 	br	8a14 <move_bola+0x2a8>
			} else if (colisao_ponto >= 21 && colisao_ponto < 39) {
    8968:	e0bfff17 	ldw	r2,-4(fp)
    896c:	10800550 	cmplti	r2,r2,21
    8970:	1000081e 	bne	r2,zero,8994 <move_bola+0x228>
    8974:	e0bfff17 	ldw	r2,-4(fp)
    8978:	108009c8 	cmpgei	r2,r2,39
    897c:	1000051e 	bne	r2,zero,8994 <move_bola+0x228>
				bola.dy = 1; //45º
    8980:	00800074 	movhi	r2,1
    8984:	10af1204 	addi	r2,r2,-17336
    8988:	00c00044 	movi	r3,1
    898c:	10c00515 	stw	r3,20(r2)
    8990:	00002006 	br	8a14 <move_bola+0x2a8>
			} else if (colisao_ponto >= 39 && colisao_ponto < 57) {
    8994:	e0bfff17 	ldw	r2,-4(fp)
    8998:	108009d0 	cmplti	r2,r2,39
    899c:	1000071e 	bne	r2,zero,89bc <move_bola+0x250>
    89a0:	e0bfff17 	ldw	r2,-4(fp)
    89a4:	10800e48 	cmpgei	r2,r2,57
    89a8:	1000041e 	bne	r2,zero,89bc <move_bola+0x250>
				bola.dy = 0;
    89ac:	00800074 	movhi	r2,1
    89b0:	10af1204 	addi	r2,r2,-17336
    89b4:	10000515 	stw	zero,20(r2)
    89b8:	00001606 	br	8a14 <move_bola+0x2a8>
			} else if (colisao_ponto >= 57 && colisao_ponto < 75) {
    89bc:	e0bfff17 	ldw	r2,-4(fp)
    89c0:	10800e50 	cmplti	r2,r2,57
    89c4:	1000081e 	bne	r2,zero,89e8 <move_bola+0x27c>
    89c8:	e0bfff17 	ldw	r2,-4(fp)
    89cc:	108012c8 	cmpgei	r2,r2,75
    89d0:	1000051e 	bne	r2,zero,89e8 <move_bola+0x27c>
				bola.dy = -1; //-45º
    89d4:	00800074 	movhi	r2,1
    89d8:	10af1204 	addi	r2,r2,-17336
    89dc:	00ffffc4 	movi	r3,-1
    89e0:	10c00515 	stw	r3,20(r2)
    89e4:	00000b06 	br	8a14 <move_bola+0x2a8>
			} else if (colisao_ponto >= 75 && colisao_ponto < 96) {
    89e8:	e0bfff17 	ldw	r2,-4(fp)
    89ec:	108012d0 	cmplti	r2,r2,75
    89f0:	1000081e 	bne	r2,zero,8a14 <move_bola+0x2a8>
    89f4:	e0bfff17 	ldw	r2,-4(fp)
    89f8:	10801808 	cmpgei	r2,r2,96
    89fc:	1000051e 	bne	r2,zero,8a14 <move_bola+0x2a8>
				bola.dy = valor_aleat();
    8a00:	00087280 	call	8728 <valor_aleat>
    8a04:	1007883a 	mov	r3,r2
    8a08:	00800074 	movhi	r2,1
    8a0c:	10af1204 	addi	r2,r2,-17336
    8a10:	10c00515 	stw	r3,20(r2)
			}
			buzzerPlay();
    8a14:	00085c40 	call	85c4 <buzzerPlay>
    8a18:	00001b06 	br	8a88 <move_bola+0x31c>
		} else {
			if (bola.x < (pads[0].x + pads[0].l - 5)) {
    8a1c:	00800074 	movhi	r2,1
    8a20:	10af1204 	addi	r2,r2,-17336
    8a24:	10c00017 	ldw	r3,0(r2)
    8a28:	00800074 	movhi	r2,1
    8a2c:	10af0a04 	addi	r2,r2,-17368
    8a30:	11000017 	ldw	r4,0(r2)
    8a34:	00800074 	movhi	r2,1
    8a38:	10af0a04 	addi	r2,r2,-17368
    8a3c:	10800217 	ldw	r2,8(r2)
    8a40:	2085883a 	add	r2,r4,r2
    8a44:	10bffec4 	addi	r2,r2,-5
    8a48:	1880040e 	bge	r3,r2,8a5c <move_bola+0x2f0>
				pontos[1] += 1;
    8a4c:	d0a0d817 	ldw	r2,-31904(gp)
    8a50:	10800044 	addi	r2,r2,1
    8a54:	d0a0d815 	stw	r2,-31904(gp)
				jogo_reset_pontos();
    8a58:	0008c1c0 	call	8c1c <jogo_reset_pontos>
			}
			if (bola.x > (pads[1].x)) {
    8a5c:	00800074 	movhi	r2,1
    8a60:	10af1204 	addi	r2,r2,-17336
    8a64:	10c00017 	ldw	r3,0(r2)
    8a68:	00800074 	movhi	r2,1
    8a6c:	10af0a04 	addi	r2,r2,-17368
    8a70:	10800417 	ldw	r2,16(r2)
    8a74:	10c0040e 	bge	r2,r3,8a88 <move_bola+0x31c>
				pontos[0] += 1;
    8a78:	d0a0d717 	ldw	r2,-31908(gp)
    8a7c:	10800044 	addi	r2,r2,1
    8a80:	d0a0d715 	stw	r2,-31908(gp)
				jogo_reset_pontos();
    8a84:	0008c1c0 	call	8c1c <jogo_reset_pontos>
			}
		}
		if(pontos[0] >= MAX_PTN || pontos[1] >= MAX_PTN){
    8a88:	d0a0d717 	ldw	r2,-31908(gp)
    8a8c:	10800288 	cmpgei	r2,r2,10
    8a90:	1000031e 	bne	r2,zero,8aa0 <move_bola+0x334>
    8a94:	d0a0d817 	ldw	r2,-31904(gp)
    8a98:	10800290 	cmplti	r2,r2,10
    8a9c:	1000021e 	bne	r2,zero,8aa8 <move_bola+0x33c>
			jogo_iniciar();
    8aa0:	0008bcc0 	call	8bcc <jogo_iniciar>
			jogo_resume_pause();
    8aa4:	0008e740 	call	8e74 <jogo_resume_pause>
		buzzerPlay();
	}

	int i;

	for(i=0; i < 2; i++){
    8aa8:	e0bffd17 	ldw	r2,-12(fp)
    8aac:	10800044 	addi	r2,r2,1
    8ab0:	e0bffd15 	stw	r2,-12(fp)
    8ab4:	e0bffd17 	ldw	r2,-12(fp)
    8ab8:	10800090 	cmplti	r2,r2,2
    8abc:	103f5b1e 	bne	r2,zero,882c <_gp+0xffff4f8c>
		if(pontos[0] >= MAX_PTN || pontos[1] >= MAX_PTN){
			jogo_iniciar();
			jogo_resume_pause();
		}
	}
}
    8ac0:	0001883a 	nop
    8ac4:	e037883a 	mov	sp,fp
    8ac8:	dfc00117 	ldw	ra,4(sp)
    8acc:	df000017 	ldw	fp,0(sp)
    8ad0:	dec00204 	addi	sp,sp,8
    8ad4:	f800283a 	ret

00008ad8 <jogo_set_inicio>:

void jogo_set_inicio(){
    8ad8:	defffe04 	addi	sp,sp,-8
    8adc:	dfc00115 	stw	ra,4(sp)
    8ae0:	df000015 	stw	fp,0(sp)
    8ae4:	d839883a 	mov	fp,sp
	bola.l = 17;
    8ae8:	00800074 	movhi	r2,1
    8aec:	10af1204 	addi	r2,r2,-17336
    8af0:	00c00444 	movi	r3,17
    8af4:	10c00215 	stw	r3,8(r2)
	bola.a = 17;
    8af8:	00800074 	movhi	r2,1
    8afc:	10af1204 	addi	r2,r2,-17336
    8b00:	00c00444 	movi	r3,17
    8b04:	10c00315 	stw	r3,12(r2)
	bola.x = 400;
    8b08:	00800074 	movhi	r2,1
    8b0c:	10af1204 	addi	r2,r2,-17336
    8b10:	00c06404 	movi	r3,400
    8b14:	10c00015 	stw	r3,0(r2)
	bola.y = 228;
    8b18:	00800074 	movhi	r2,1
    8b1c:	10af1204 	addi	r2,r2,-17336
    8b20:	00c03904 	movi	r3,228
    8b24:	10c00115 	stw	r3,4(r2)

	pads[0].y = 200;
    8b28:	00800074 	movhi	r2,1
    8b2c:	10af0a04 	addi	r2,r2,-17368
    8b30:	00c03204 	movi	r3,200
    8b34:	10c00115 	stw	r3,4(r2)
	pads[0].l = 32;
    8b38:	00800074 	movhi	r2,1
    8b3c:	10af0a04 	addi	r2,r2,-17368
    8b40:	00c00804 	movi	r3,32
    8b44:	10c00215 	stw	r3,8(r2)
	pads[0].a = 96;
    8b48:	00800074 	movhi	r2,1
    8b4c:	10af0a04 	addi	r2,r2,-17368
    8b50:	00c01804 	movi	r3,96
    8b54:	10c00315 	stw	r3,12(r2)
	pads[0].x = 143;
    8b58:	00800074 	movhi	r2,1
    8b5c:	10af0a04 	addi	r2,r2,-17368
    8b60:	00c023c4 	movi	r3,143
    8b64:	10c00015 	stw	r3,0(r2)

	pads[1].y = 200;
    8b68:	00800074 	movhi	r2,1
    8b6c:	10af0a04 	addi	r2,r2,-17368
    8b70:	00c03204 	movi	r3,200
    8b74:	10c00515 	stw	r3,20(r2)
	pads[1].l = 32;
    8b78:	00800074 	movhi	r2,1
    8b7c:	10af0a04 	addi	r2,r2,-17368
    8b80:	00c00804 	movi	r3,32
    8b84:	10c00615 	stw	r3,24(r2)
	pads[1].a = 96;
    8b88:	00800074 	movhi	r2,1
    8b8c:	10af0a04 	addi	r2,r2,-17368
    8b90:	00c01804 	movi	r3,96
    8b94:	10c00715 	stw	r3,28(r2)
	pads[1].x = 751;
    8b98:	00800074 	movhi	r2,1
    8b9c:	10af0a04 	addi	r2,r2,-17368
    8ba0:	00c0bbc4 	movi	r3,751
    8ba4:	10c00415 	stw	r3,16(r2)

	pontos[0] = 0;
    8ba8:	d020d715 	stw	zero,-31908(gp)
	pontos[1] = 0;
    8bac:	d020d815 	stw	zero,-31904(gp)
	jogo_loop();
    8bb0:	0008ec40 	call	8ec4 <jogo_loop>
}
    8bb4:	0001883a 	nop
    8bb8:	e037883a 	mov	sp,fp
    8bbc:	dfc00117 	ldw	ra,4(sp)
    8bc0:	df000017 	ldw	fp,0(sp)
    8bc4:	dec00204 	addi	sp,sp,8
    8bc8:	f800283a 	ret

00008bcc <jogo_iniciar>:

void jogo_iniciar(){
    8bcc:	defffe04 	addi	sp,sp,-8
    8bd0:	dfc00115 	stw	ra,4(sp)
    8bd4:	df000015 	stw	fp,0(sp)
    8bd8:	d839883a 	mov	fp,sp
	jogo_set_inicio();
    8bdc:	0008ad80 	call	8ad8 <jogo_set_inicio>
	bola.dx = -1;
    8be0:	00800074 	movhi	r2,1
    8be4:	10af1204 	addi	r2,r2,-17336
    8be8:	00ffffc4 	movi	r3,-1
    8bec:	10c00415 	stw	r3,16(r2)
	bola.dy = 0;
    8bf0:	00800074 	movhi	r2,1
    8bf4:	10af1204 	addi	r2,r2,-17336
    8bf8:	10000515 	stw	zero,20(r2)
	exec = 1;
    8bfc:	00800044 	movi	r2,1
    8c00:	d0a0d915 	stw	r2,-31900(gp)
}
    8c04:	0001883a 	nop
    8c08:	e037883a 	mov	sp,fp
    8c0c:	dfc00117 	ldw	ra,4(sp)
    8c10:	df000017 	ldw	fp,0(sp)
    8c14:	dec00204 	addi	sp,sp,8
    8c18:	f800283a 	ret

00008c1c <jogo_reset_pontos>:

void jogo_reset_pontos(){
    8c1c:	deffff04 	addi	sp,sp,-4
    8c20:	df000015 	stw	fp,0(sp)
    8c24:	d839883a 	mov	fp,sp
	bola.l = 17;
    8c28:	00800074 	movhi	r2,1
    8c2c:	10af1204 	addi	r2,r2,-17336
    8c30:	00c00444 	movi	r3,17
    8c34:	10c00215 	stw	r3,8(r2)
	bola.a = 17;
    8c38:	00800074 	movhi	r2,1
    8c3c:	10af1204 	addi	r2,r2,-17336
    8c40:	00c00444 	movi	r3,17
    8c44:	10c00315 	stw	r3,12(r2)
	bola.x = 400;
    8c48:	00800074 	movhi	r2,1
    8c4c:	10af1204 	addi	r2,r2,-17336
    8c50:	00c06404 	movi	r3,400
    8c54:	10c00015 	stw	r3,0(r2)
	bola.y = 228;
    8c58:	00800074 	movhi	r2,1
    8c5c:	10af1204 	addi	r2,r2,-17336
    8c60:	00c03904 	movi	r3,228
    8c64:	10c00115 	stw	r3,4(r2)

	pads[0].y = 200;
    8c68:	00800074 	movhi	r2,1
    8c6c:	10af0a04 	addi	r2,r2,-17368
    8c70:	00c03204 	movi	r3,200
    8c74:	10c00115 	stw	r3,4(r2)
	pads[0].l = 32;
    8c78:	00800074 	movhi	r2,1
    8c7c:	10af0a04 	addi	r2,r2,-17368
    8c80:	00c00804 	movi	r3,32
    8c84:	10c00215 	stw	r3,8(r2)
	pads[0].a = 96;
    8c88:	00800074 	movhi	r2,1
    8c8c:	10af0a04 	addi	r2,r2,-17368
    8c90:	00c01804 	movi	r3,96
    8c94:	10c00315 	stw	r3,12(r2)
	pads[0].x = 143;
    8c98:	00800074 	movhi	r2,1
    8c9c:	10af0a04 	addi	r2,r2,-17368
    8ca0:	00c023c4 	movi	r3,143
    8ca4:	10c00015 	stw	r3,0(r2)

	pads[1].y = 200;
    8ca8:	00800074 	movhi	r2,1
    8cac:	10af0a04 	addi	r2,r2,-17368
    8cb0:	00c03204 	movi	r3,200
    8cb4:	10c00515 	stw	r3,20(r2)
	pads[1].l = 32;
    8cb8:	00800074 	movhi	r2,1
    8cbc:	10af0a04 	addi	r2,r2,-17368
    8cc0:	00c00804 	movi	r3,32
    8cc4:	10c00615 	stw	r3,24(r2)
	pads[1].a = 96;
    8cc8:	00800074 	movhi	r2,1
    8ccc:	10af0a04 	addi	r2,r2,-17368
    8cd0:	00c01804 	movi	r3,96
    8cd4:	10c00715 	stw	r3,28(r2)
	pads[1].x = 751;
    8cd8:	00800074 	movhi	r2,1
    8cdc:	10af0a04 	addi	r2,r2,-17368
    8ce0:	00c0bbc4 	movi	r3,751
    8ce4:	10c00415 	stw	r3,16(r2)

	bola.dx = 1;
    8ce8:	00800074 	movhi	r2,1
    8cec:	10af1204 	addi	r2,r2,-17336
    8cf0:	00c00044 	movi	r3,1
    8cf4:	10c00415 	stw	r3,16(r2)
	bola.dy = 0;
    8cf8:	00800074 	movhi	r2,1
    8cfc:	10af1204 	addi	r2,r2,-17336
    8d00:	10000515 	stw	zero,20(r2)
}
    8d04:	0001883a 	nop
    8d08:	e037883a 	mov	sp,fp
    8d0c:	df000017 	ldw	fp,0(sp)
    8d10:	dec00104 	addi	sp,sp,4
    8d14:	f800283a 	ret

00008d18 <jogo_setar_pads>:

void jogo_setar_pads(int y_p1, int y_p2){
    8d18:	defffd04 	addi	sp,sp,-12
    8d1c:	df000215 	stw	fp,8(sp)
    8d20:	df000204 	addi	fp,sp,8
    8d24:	e13ffe15 	stw	r4,-8(fp)
    8d28:	e17fff15 	stw	r5,-4(fp)
	pads[0].y = y_p1;
    8d2c:	00800074 	movhi	r2,1
    8d30:	10af0a04 	addi	r2,r2,-17368
    8d34:	e0fffe17 	ldw	r3,-8(fp)
    8d38:	10c00115 	stw	r3,4(r2)
	pads[1].y = y_p2;
    8d3c:	00800074 	movhi	r2,1
    8d40:	10af0a04 	addi	r2,r2,-17368
    8d44:	e0ffff17 	ldw	r3,-4(fp)
    8d48:	10c00515 	stw	r3,20(r2)
}
    8d4c:	0001883a 	nop
    8d50:	e037883a 	mov	sp,fp
    8d54:	df000017 	ldw	fp,0(sp)
    8d58:	dec00104 	addi	sp,sp,4
    8d5c:	f800283a 	ret

00008d60 <set_position>:

void set_position(int v_p1, int v_p2, int x_b, int y_b){
    8d60:	defff904 	addi	sp,sp,-28
    8d64:	df000615 	stw	fp,24(sp)
    8d68:	df000604 	addi	fp,sp,24
    8d6c:	e13ffc15 	stw	r4,-16(fp)
    8d70:	e17ffd15 	stw	r5,-12(fp)
    8d74:	e1bffe15 	stw	r6,-8(fp)
    8d78:	e1ffff15 	stw	r7,-4(fp)
	v_p1 = v_p1 > LIMITE_INFERIOR - 96 ? LIMITE_INFERIOR - 96: v_p1;
    8d7c:	e0bffc17 	ldw	r2,-16(fp)
    8d80:	10c068d0 	cmplti	r3,r2,419
    8d84:	1800011e 	bne	r3,zero,8d8c <set_position+0x2c>
    8d88:	00806884 	movi	r2,418
    8d8c:	e0bffc15 	stw	r2,-16(fp)
	v_p1 = v_p1 < LIMITE_SUPERIOR ? LIMITE_SUPERIOR : v_p1;
    8d90:	e0bffc17 	ldw	r2,-16(fp)
    8d94:	10c00888 	cmpgei	r3,r2,34
    8d98:	1800011e 	bne	r3,zero,8da0 <set_position+0x40>
    8d9c:	00800884 	movi	r2,34
    8da0:	e0bffc15 	stw	r2,-16(fp)
	v_p2 = v_p2 > LIMITE_INFERIOR - 96 ? LIMITE_INFERIOR - 96: v_p2;
    8da4:	e0bffd17 	ldw	r2,-12(fp)
    8da8:	10c068d0 	cmplti	r3,r2,419
    8dac:	1800011e 	bne	r3,zero,8db4 <set_position+0x54>
    8db0:	00806884 	movi	r2,418
    8db4:	e0bffd15 	stw	r2,-12(fp)
	v_p2 = v_p2 < LIMITE_SUPERIOR ? LIMITE_SUPERIOR : v_p2;
    8db8:	e0bffd17 	ldw	r2,-12(fp)
    8dbc:	10c00888 	cmpgei	r3,r2,34
    8dc0:	1800011e 	bne	r3,zero,8dc8 <set_position+0x68>
    8dc4:	00800884 	movi	r2,34
    8dc8:	e0bffd15 	stw	r2,-12(fp)

	long int dataa, datab;
	dataa = v_p1;
    8dcc:	e0bffc17 	ldw	r2,-16(fp)
    8dd0:	e0bffa15 	stw	r2,-24(fp)
	dataa |= (v_p2 << 16);
    8dd4:	e0bffd17 	ldw	r2,-12(fp)
    8dd8:	1004943a 	slli	r2,r2,16
    8ddc:	e0fffa17 	ldw	r3,-24(fp)
    8de0:	1884b03a 	or	r2,r3,r2
    8de4:	e0bffa15 	stw	r2,-24(fp)
	datab = y_b;
    8de8:	e0bfff17 	ldw	r2,-4(fp)
    8dec:	e0bffb15 	stw	r2,-20(fp)
	datab |= (x_b << 16);
    8df0:	e0bffe17 	ldw	r2,-8(fp)
    8df4:	1004943a 	slli	r2,r2,16
    8df8:	e0fffb17 	ldw	r3,-20(fp)
    8dfc:	1884b03a 	or	r2,r3,r2
    8e00:	e0bffb15 	stw	r2,-20(fp)
	ALT_CI_VGA(dataa, datab);
    8e04:	e0bffa17 	ldw	r2,-24(fp)
    8e08:	e0fffb17 	ldw	r3,-20(fp)
    8e0c:	10c5c072 	custom	1,r2,r2,r3
}
    8e10:	0001883a 	nop
    8e14:	e037883a 	mov	sp,fp
    8e18:	df000017 	ldw	fp,0(sp)
    8e1c:	dec00104 	addi	sp,sp,4
    8e20:	f800283a 	ret

00008e24 <jogo_pegar_pontos>:

int* jogo_pegar_pontos(){
    8e24:	deffff04 	addi	sp,sp,-4
    8e28:	df000015 	stw	fp,0(sp)
    8e2c:	d839883a 	mov	fp,sp
	return pontos;
    8e30:	d0a0d704 	addi	r2,gp,-31908
}
    8e34:	e037883a 	mov	sp,fp
    8e38:	df000017 	ldw	fp,0(sp)
    8e3c:	dec00104 	addi	sp,sp,4
    8e40:	f800283a 	ret

00008e44 <jogo_parar>:

void jogo_parar(){
    8e44:	defffe04 	addi	sp,sp,-8
    8e48:	dfc00115 	stw	ra,4(sp)
    8e4c:	df000015 	stw	fp,0(sp)
    8e50:	d839883a 	mov	fp,sp
	exec = 0;
    8e54:	d020d915 	stw	zero,-31900(gp)
	jogo_set_inicio();
    8e58:	0008ad80 	call	8ad8 <jogo_set_inicio>
}
    8e5c:	0001883a 	nop
    8e60:	e037883a 	mov	sp,fp
    8e64:	dfc00117 	ldw	ra,4(sp)
    8e68:	df000017 	ldw	fp,0(sp)
    8e6c:	dec00204 	addi	sp,sp,8
    8e70:	f800283a 	ret

00008e74 <jogo_resume_pause>:

void jogo_resume_pause(){
    8e74:	deffff04 	addi	sp,sp,-4
    8e78:	df000015 	stw	fp,0(sp)
    8e7c:	d839883a 	mov	fp,sp
	exec = (exec == 1) ? 0 : 1;
    8e80:	d0a0d917 	ldw	r2,-31900(gp)
    8e84:	10800058 	cmpnei	r2,r2,1
    8e88:	10803fcc 	andi	r2,r2,255
    8e8c:	d0a0d915 	stw	r2,-31900(gp)
}
    8e90:	0001883a 	nop
    8e94:	e037883a 	mov	sp,fp
    8e98:	df000017 	ldw	fp,0(sp)
    8e9c:	dec00104 	addi	sp,sp,4
    8ea0:	f800283a 	ret

00008ea4 <jogo_isExec>:

int jogo_isExec(){
    8ea4:	deffff04 	addi	sp,sp,-4
    8ea8:	df000015 	stw	fp,0(sp)
    8eac:	d839883a 	mov	fp,sp
	return exec;
    8eb0:	d0a0d917 	ldw	r2,-31900(gp)
}
    8eb4:	e037883a 	mov	sp,fp
    8eb8:	df000017 	ldw	fp,0(sp)
    8ebc:	dec00104 	addi	sp,sp,4
    8ec0:	f800283a 	ret

00008ec4 <jogo_loop>:
/*
 * Essa função deve ficar no loop principal da aplicação*/
void jogo_loop(){
    8ec4:	defffe04 	addi	sp,sp,-8
    8ec8:	dfc00115 	stw	ra,4(sp)
    8ecc:	df000015 	stw	fp,0(sp)
    8ed0:	d839883a 	mov	fp,sp
	if(1 == exec){
    8ed4:	d0a0d917 	ldw	r2,-31900(gp)
    8ed8:	10800058 	cmpnei	r2,r2,1
    8edc:	1000121e 	bne	r2,zero,8f28 <jogo_loop+0x64>
		move_bola();
    8ee0:	000876c0 	call	876c <move_bola>
		set_position(pads[0].y, pads[1].y, bola.x, bola.y);
    8ee4:	00800074 	movhi	r2,1
    8ee8:	10af0a04 	addi	r2,r2,-17368
    8eec:	10c00117 	ldw	r3,4(r2)
    8ef0:	00800074 	movhi	r2,1
    8ef4:	10af0a04 	addi	r2,r2,-17368
    8ef8:	11000517 	ldw	r4,20(r2)
    8efc:	00800074 	movhi	r2,1
    8f00:	10af1204 	addi	r2,r2,-17336
    8f04:	11400017 	ldw	r5,0(r2)
    8f08:	00800074 	movhi	r2,1
    8f0c:	10af1204 	addi	r2,r2,-17336
    8f10:	10800117 	ldw	r2,4(r2)
    8f14:	100f883a 	mov	r7,r2
    8f18:	280d883a 	mov	r6,r5
    8f1c:	200b883a 	mov	r5,r4
    8f20:	1809883a 	mov	r4,r3
    8f24:	0008d600 	call	8d60 <set_position>
	}
	contador++;
    8f28:	d0a0d617 	ldw	r2,-31912(gp)
    8f2c:	10800044 	addi	r2,r2,1
    8f30:	d0a0d615 	stw	r2,-31912(gp)
	contador = contador == 3 ? 0 : contador;
    8f34:	d0a0d617 	ldw	r2,-31912(gp)
    8f38:	108000e0 	cmpeqi	r2,r2,3
    8f3c:	1000021e 	bne	r2,zero,8f48 <jogo_loop+0x84>
    8f40:	d0a0d617 	ldw	r2,-31912(gp)
    8f44:	00000106 	br	8f4c <jogo_loop+0x88>
    8f48:	0005883a 	mov	r2,zero
    8f4c:	d0a0d615 	stw	r2,-31912(gp)
}
    8f50:	0001883a 	nop
    8f54:	e037883a 	mov	sp,fp
    8f58:	dfc00117 	ldw	ra,4(sp)
    8f5c:	df000017 	ldw	fp,0(sp)
    8f60:	dec00204 	addi	sp,sp,8
    8f64:	f800283a 	ret

00008f68 <main>:

int pAnt[2] = {-1, -1};

int getBTN();

int main() {
    8f68:	defffc04 	addi	sp,sp,-16
    8f6c:	dfc00315 	stw	ra,12(sp)
    8f70:	df000215 	stw	fp,8(sp)
    8f74:	df000204 	addi	fp,sp,8
	buzzerPausa();
    8f78:	00085940 	call	8594 <buzzerPausa>
	alt_printf("Iniciando!\n");
    8f7c:	01000074 	movhi	r4,1
    8f80:	212d5604 	addi	r4,r4,-19112
    8f84:	0009c880 	call	9c88 <alt_printf>
	int buttons = -1;
    8f88:	00bfffc4 	movi	r2,-1
    8f8c:	e0bffe15 	stw	r2,-8(fp)
	initLCD();
    8f90:	000819c0 	call	819c <initLCD>

	writeLCD("PING PONG\0");
    8f94:	01000074 	movhi	r4,1
    8f98:	212d5904 	addi	r4,r4,-19100
    8f9c:	000805c0 	call	805c <writeLCD>
	usleep(1000000);
    8fa0:	010003f4 	movhi	r4,15
    8fa4:	21109004 	addi	r4,r4,16960
    8fa8:	0009ef00 	call	9ef0 <usleep>

	clearLCD();
    8fac:	00081340 	call	8134 <clearLCD>
	writeLCD("Pres. RESET");
    8fb0:	01000074 	movhi	r4,1
    8fb4:	212d5c04 	addi	r4,r4,-19088
    8fb8:	000805c0 	call	805c <writeLCD>
	while(buttons != BTN_RESET){
    8fbc:	00000206 	br	8fc8 <main+0x60>
		buttons = getBTN();
    8fc0:	00091480 	call	9148 <getBTN>
    8fc4:	e0bffe15 	stw	r2,-8(fp)
	writeLCD("PING PONG\0");
	usleep(1000000);

	clearLCD();
	writeLCD("Pres. RESET");
	while(buttons != BTN_RESET){
    8fc8:	e0bffe17 	ldw	r2,-8(fp)
    8fcc:	103ffc1e 	bne	r2,zero,8fc0 <_gp+0xffff5720>
		buttons = getBTN();
	}
	clearLCD();
    8fd0:	00081340 	call	8134 <clearLCD>
	jogo_iniciar();
    8fd4:	0008bcc0 	call	8bcc <jogo_iniciar>
	jogo_loop();
    8fd8:	0008ec40 	call	8ec4 <jogo_loop>

	while (1) {
		usleep(9000);
    8fdc:	0108ca04 	movi	r4,9000
    8fe0:	0009ef00 	call	9ef0 <usleep>
		if(get_charar() == 'k'){
    8fe4:	00083100 	call	8310 <get_charar>
    8fe8:	10803fcc 	andi	r2,r2,255
    8fec:	1080201c 	xori	r2,r2,128
    8ff0:	10bfe004 	addi	r2,r2,-128
    8ff4:	10801ad8 	cmpnei	r2,r2,107
    8ff8:	1000031e 	bne	r2,zero,9008 <main+0xa0>
			converteAna(&ondeUm, &ondeDois);
    8ffc:	d1600404 	addi	r5,gp,-32752
    9000:	d1200304 	addi	r4,gp,-32756
    9004:	00083dc0 	call	83dc <converteAna>
		}
		if(ondeUm == 0 && anaUm >= 34){
    9008:	d0a00317 	ldw	r2,-32756(gp)
    900c:	1000071e 	bne	r2,zero,902c <main+0xc4>
    9010:	d0a00117 	ldw	r2,-32764(gp)
    9014:	10800890 	cmplti	r2,r2,34
    9018:	1000041e 	bne	r2,zero,902c <main+0xc4>
			anaUm = anaUm - 4;
    901c:	d0a00117 	ldw	r2,-32764(gp)
    9020:	10bfff04 	addi	r2,r2,-4
    9024:	d0a00115 	stw	r2,-32764(gp)
    9028:	00000906 	br	9050 <main+0xe8>
		}else if(ondeUm == 2 && anaUm <= 418){
    902c:	d0a00317 	ldw	r2,-32756(gp)
    9030:	10800098 	cmpnei	r2,r2,2
    9034:	1000061e 	bne	r2,zero,9050 <main+0xe8>
    9038:	d0a00117 	ldw	r2,-32764(gp)
    903c:	108068c8 	cmpgei	r2,r2,419
    9040:	1000031e 	bne	r2,zero,9050 <main+0xe8>
			anaUm = anaUm + 4;
    9044:	d0a00117 	ldw	r2,-32764(gp)
    9048:	10800104 	addi	r2,r2,4
    904c:	d0a00115 	stw	r2,-32764(gp)
		}

		if(ondeDois == 0 && anaDois >= 34){
    9050:	d0a00417 	ldw	r2,-32752(gp)
    9054:	1000071e 	bne	r2,zero,9074 <main+0x10c>
    9058:	d0a00217 	ldw	r2,-32760(gp)
    905c:	10800890 	cmplti	r2,r2,34
    9060:	1000041e 	bne	r2,zero,9074 <main+0x10c>
			anaDois = anaDois - 4;
    9064:	d0a00217 	ldw	r2,-32760(gp)
    9068:	10bfff04 	addi	r2,r2,-4
    906c:	d0a00215 	stw	r2,-32760(gp)
    9070:	00000906 	br	9098 <main+0x130>
		}else if(ondeDois == 2 && anaDois <= 418){
    9074:	d0a00417 	ldw	r2,-32752(gp)
    9078:	10800098 	cmpnei	r2,r2,2
    907c:	1000061e 	bne	r2,zero,9098 <main+0x130>
    9080:	d0a00217 	ldw	r2,-32760(gp)
    9084:	108068c8 	cmpgei	r2,r2,419
    9088:	1000031e 	bne	r2,zero,9098 <main+0x130>
			anaDois = anaDois + 4;
    908c:	d0a00217 	ldw	r2,-32760(gp)
    9090:	10800104 	addi	r2,r2,4
    9094:	d0a00215 	stw	r2,-32760(gp)
		}

		jogo_setar_pads(anaUm, anaDois);
    9098:	d0a00117 	ldw	r2,-32764(gp)
    909c:	d0e00217 	ldw	r3,-32760(gp)
    90a0:	180b883a 	mov	r5,r3
    90a4:	1009883a 	mov	r4,r2
    90a8:	0008d180 	call	8d18 <jogo_setar_pads>
		int *p = jogo_pegar_pontos();
    90ac:	0008e240 	call	8e24 <jogo_pegar_pontos>
    90b0:	e0bfff15 	stw	r2,-4(fp)
		if(pAnt[0] != p[0] || pAnt[1] != p[1]){	// Muda os pontos no LCD, apenas se houve uma munda�a.
    90b4:	d0e00517 	ldw	r3,-32748(gp)
    90b8:	e0bfff17 	ldw	r2,-4(fp)
    90bc:	10800017 	ldw	r2,0(r2)
    90c0:	1880051e 	bne	r3,r2,90d8 <main+0x170>
    90c4:	d0e00617 	ldw	r3,-32744(gp)
    90c8:	e0bfff17 	ldw	r2,-4(fp)
    90cc:	10800104 	addi	r2,r2,4
    90d0:	10800017 	ldw	r2,0(r2)
    90d4:	18800e26 	beq	r3,r2,9110 <main+0x1a8>
			lcd_setPontos(p[0], p[1]);
    90d8:	e0bfff17 	ldw	r2,-4(fp)
    90dc:	10c00017 	ldw	r3,0(r2)
    90e0:	e0bfff17 	ldw	r2,-4(fp)
    90e4:	10800104 	addi	r2,r2,4
    90e8:	10800017 	ldw	r2,0(r2)
    90ec:	100b883a 	mov	r5,r2
    90f0:	1809883a 	mov	r4,r3
    90f4:	00082b40 	call	82b4 <lcd_setPontos>
			pAnt[0] = p[0]; pAnt[1] = p[1];
    90f8:	e0bfff17 	ldw	r2,-4(fp)
    90fc:	10800017 	ldw	r2,0(r2)
    9100:	d0a00515 	stw	r2,-32748(gp)
    9104:	e0bfff17 	ldw	r2,-4(fp)
    9108:	10800117 	ldw	r2,4(r2)
    910c:	d0a00615 	stw	r2,-32744(gp)
		}
		jogo_loop();
    9110:	0008ec40 	call	8ec4 <jogo_loop>

		if (BTN_RESET == getBTN()) { // Se bot�o reset pressionado
    9114:	00091480 	call	9148 <getBTN>
    9118:	1000061e 	bne	r2,zero,9134 <main+0x1cc>
			(jogo_isExec() == 1) ? jogo_parar() : jogo_iniciar();
    911c:	0008ea40 	call	8ea4 <jogo_isExec>
    9120:	10800058 	cmpnei	r2,r2,1
    9124:	1000021e 	bne	r2,zero,9130 <main+0x1c8>
    9128:	0008e440 	call	8e44 <jogo_parar>
    912c:	00000106 	br	9134 <main+0x1cc>
    9130:	0008bcc0 	call	8bcc <jogo_iniciar>
		}
		if (BTN_RESUME_PAUSE == btn_atual) { // Se bot�o reset pressionado
    9134:	d0a00017 	ldw	r2,-32768(gp)
    9138:	10800958 	cmpnei	r2,r2,37
    913c:	103fa71e 	bne	r2,zero,8fdc <_gp+0xffff573c>
			jogo_resume_pause();
    9140:	0008e740 	call	8e74 <jogo_resume_pause>
		//buzzerPlay();

		//char str[10];
		//sprintf(str, "%i vs %i\n", anaUm, anaDois);
	//	alt_printf(str);
	}
    9144:	003fa506 	br	8fdc <_gp+0xffff573c>

00009148 <getBTN>:
	return 0;
}

int getBTN(){
    9148:	defffe04 	addi	sp,sp,-8
    914c:	dfc00115 	stw	ra,4(sp)
    9150:	df000015 	stw	fp,0(sp)
    9154:	d839883a 	mov	fp,sp
	btn_atual = IORD_ALTERA_AVALON_PIO_DATA(PIO_BASE);
    9158:	00800074 	movhi	r2,1
    915c:	10841404 	addi	r2,r2,4176
    9160:	10800037 	ldwio	r2,0(r2)
    9164:	d0a00015 	stw	r2,-32768(gp)
	if( btn_atual != NADA_PRESSIONADO ) {
    9168:	d0a00017 	ldw	r2,-32768(gp)
    916c:	10800060 	cmpeqi	r2,r2,1
    9170:	1000051e 	bne	r2,zero,9188 <getBTN+0x40>
		usleep (DEBOUNCE);
    9174:	010000f4 	movhi	r4,3
    9178:	212fc804 	addi	r4,r4,-16608
    917c:	0009ef00 	call	9ef0 <usleep>
		return btn_atual;
    9180:	d0a00017 	ldw	r2,-32768(gp)
    9184:	00000106 	br	918c <getBTN+0x44>
	}
	return -1;
    9188:	00bfffc4 	movi	r2,-1
}
    918c:	e037883a 	mov	sp,fp
    9190:	dfc00117 	ldw	ra,4(sp)
    9194:	df000017 	ldw	fp,0(sp)
    9198:	dec00204 	addi	sp,sp,8
    919c:	f800283a 	ret

000091a0 <_sprintf_r>:
    91a0:	defff704 	addi	sp,sp,-36
    91a4:	dfc00715 	stw	ra,28(sp)
    91a8:	d9c00815 	stw	r7,32(sp)
    91ac:	00808204 	movi	r2,520
    91b0:	d880000d 	sth	r2,0(sp)
    91b4:	00a00034 	movhi	r2,32768
    91b8:	10bfffc4 	addi	r2,r2,-1
    91bc:	d8800515 	stw	r2,20(sp)
    91c0:	d8800315 	stw	r2,12(sp)
    91c4:	00bfffc4 	movi	r2,-1
    91c8:	d880008d 	sth	r2,2(sp)
    91cc:	00800074 	movhi	r2,1
    91d0:	d9400415 	stw	r5,16(sp)
    91d4:	d9400215 	stw	r5,8(sp)
    91d8:	10a60c04 	addi	r2,r2,-26576
    91dc:	d9c00804 	addi	r7,sp,32
    91e0:	d80b883a 	mov	r5,sp
    91e4:	d8800115 	stw	r2,4(sp)
    91e8:	d8000615 	stw	zero,24(sp)
    91ec:	00092e80 	call	92e8 <___svfprintf_internal_r>
    91f0:	d8c00417 	ldw	r3,16(sp)
    91f4:	18000005 	stb	zero,0(r3)
    91f8:	dfc00717 	ldw	ra,28(sp)
    91fc:	dec00904 	addi	sp,sp,36
    9200:	f800283a 	ret

00009204 <sprintf>:
    9204:	defff604 	addi	sp,sp,-40
    9208:	dfc00715 	stw	ra,28(sp)
    920c:	d9800815 	stw	r6,32(sp)
    9210:	d9c00915 	stw	r7,36(sp)
    9214:	00808204 	movi	r2,520
    9218:	d880000d 	sth	r2,0(sp)
    921c:	00a00034 	movhi	r2,32768
    9220:	10bfffc4 	addi	r2,r2,-1
    9224:	d8800515 	stw	r2,20(sp)
    9228:	d8800315 	stw	r2,12(sp)
    922c:	00bfffc4 	movi	r2,-1
    9230:	d880008d 	sth	r2,2(sp)
    9234:	00800074 	movhi	r2,1
    9238:	10a60c04 	addi	r2,r2,-26576
    923c:	d8800115 	stw	r2,4(sp)
    9240:	00800074 	movhi	r2,1
    9244:	10ae3004 	addi	r2,r2,-18240
    9248:	d9000415 	stw	r4,16(sp)
    924c:	d9000215 	stw	r4,8(sp)
    9250:	11000017 	ldw	r4,0(r2)
    9254:	280d883a 	mov	r6,r5
    9258:	d9c00804 	addi	r7,sp,32
    925c:	d80b883a 	mov	r5,sp
    9260:	d8000615 	stw	zero,24(sp)
    9264:	00092e80 	call	92e8 <___svfprintf_internal_r>
    9268:	d8c00417 	ldw	r3,16(sp)
    926c:	18000005 	stb	zero,0(r3)
    9270:	dfc00717 	ldw	ra,28(sp)
    9274:	dec00a04 	addi	sp,sp,40
    9278:	f800283a 	ret

0000927c <print_repeat>:
    927c:	defffb04 	addi	sp,sp,-20
    9280:	dc800315 	stw	r18,12(sp)
    9284:	dc400215 	stw	r17,8(sp)
    9288:	dc000115 	stw	r16,4(sp)
    928c:	dfc00415 	stw	ra,16(sp)
    9290:	2025883a 	mov	r18,r4
    9294:	2823883a 	mov	r17,r5
    9298:	d9800005 	stb	r6,0(sp)
    929c:	3821883a 	mov	r16,r7
    92a0:	04000a0e 	bge	zero,r16,92cc <print_repeat+0x50>
    92a4:	88800117 	ldw	r2,4(r17)
    92a8:	01c00044 	movi	r7,1
    92ac:	d80d883a 	mov	r6,sp
    92b0:	880b883a 	mov	r5,r17
    92b4:	9009883a 	mov	r4,r18
    92b8:	103ee83a 	callr	r2
    92bc:	843fffc4 	addi	r16,r16,-1
    92c0:	103ff726 	beq	r2,zero,92a0 <_gp+0xffff5a00>
    92c4:	00bfffc4 	movi	r2,-1
    92c8:	00000106 	br	92d0 <print_repeat+0x54>
    92cc:	0005883a 	mov	r2,zero
    92d0:	dfc00417 	ldw	ra,16(sp)
    92d4:	dc800317 	ldw	r18,12(sp)
    92d8:	dc400217 	ldw	r17,8(sp)
    92dc:	dc000117 	ldw	r16,4(sp)
    92e0:	dec00504 	addi	sp,sp,20
    92e4:	f800283a 	ret

000092e8 <___svfprintf_internal_r>:
    92e8:	deffe504 	addi	sp,sp,-108
    92ec:	d8c00804 	addi	r3,sp,32
    92f0:	ddc01815 	stw	r23,96(sp)
    92f4:	dd801715 	stw	r22,92(sp)
    92f8:	dd401615 	stw	r21,88(sp)
    92fc:	dd001515 	stw	r20,84(sp)
    9300:	dcc01415 	stw	r19,80(sp)
    9304:	dc801315 	stw	r18,76(sp)
    9308:	dc401215 	stw	r17,72(sp)
    930c:	dc001115 	stw	r16,68(sp)
    9310:	dfc01a15 	stw	ra,104(sp)
    9314:	df001915 	stw	fp,100(sp)
    9318:	2029883a 	mov	r20,r4
    931c:	2823883a 	mov	r17,r5
    9320:	382d883a 	mov	r22,r7
    9324:	d9800f15 	stw	r6,60(sp)
    9328:	0021883a 	mov	r16,zero
    932c:	d8000e15 	stw	zero,56(sp)
    9330:	d8000a15 	stw	zero,40(sp)
    9334:	002b883a 	mov	r21,zero
    9338:	0027883a 	mov	r19,zero
    933c:	0025883a 	mov	r18,zero
    9340:	d8000c15 	stw	zero,48(sp)
    9344:	d8000b15 	stw	zero,44(sp)
    9348:	002f883a 	mov	r23,zero
    934c:	d8c00915 	stw	r3,36(sp)
    9350:	d8c00f17 	ldw	r3,60(sp)
    9354:	19000003 	ldbu	r4,0(r3)
    9358:	20803fcc 	andi	r2,r4,255
    935c:	1080201c 	xori	r2,r2,128
    9360:	10bfe004 	addi	r2,r2,-128
    9364:	10011e26 	beq	r2,zero,97e0 <___svfprintf_internal_r+0x4f8>
    9368:	00c00044 	movi	r3,1
    936c:	b8c01426 	beq	r23,r3,93c0 <___svfprintf_internal_r+0xd8>
    9370:	1dc00216 	blt	r3,r23,937c <___svfprintf_internal_r+0x94>
    9374:	b8000626 	beq	r23,zero,9390 <___svfprintf_internal_r+0xa8>
    9378:	00011506 	br	97d0 <___svfprintf_internal_r+0x4e8>
    937c:	01400084 	movi	r5,2
    9380:	b9401d26 	beq	r23,r5,93f8 <___svfprintf_internal_r+0x110>
    9384:	014000c4 	movi	r5,3
    9388:	b9402b26 	beq	r23,r5,9438 <___svfprintf_internal_r+0x150>
    938c:	00011006 	br	97d0 <___svfprintf_internal_r+0x4e8>
    9390:	01400944 	movi	r5,37
    9394:	1140fc26 	beq	r2,r5,9788 <___svfprintf_internal_r+0x4a0>
    9398:	88800117 	ldw	r2,4(r17)
    939c:	d9000005 	stb	r4,0(sp)
    93a0:	01c00044 	movi	r7,1
    93a4:	d80d883a 	mov	r6,sp
    93a8:	880b883a 	mov	r5,r17
    93ac:	a009883a 	mov	r4,r20
    93b0:	103ee83a 	callr	r2
    93b4:	1000d81e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    93b8:	84000044 	addi	r16,r16,1
    93bc:	00010406 	br	97d0 <___svfprintf_internal_r+0x4e8>
    93c0:	01400c04 	movi	r5,48
    93c4:	1140fa26 	beq	r2,r5,97b0 <___svfprintf_internal_r+0x4c8>
    93c8:	01400944 	movi	r5,37
    93cc:	11400a1e 	bne	r2,r5,93f8 <___svfprintf_internal_r+0x110>
    93d0:	d8800005 	stb	r2,0(sp)
    93d4:	88800117 	ldw	r2,4(r17)
    93d8:	b80f883a 	mov	r7,r23
    93dc:	d80d883a 	mov	r6,sp
    93e0:	880b883a 	mov	r5,r17
    93e4:	a009883a 	mov	r4,r20
    93e8:	103ee83a 	callr	r2
    93ec:	1000ca1e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    93f0:	84000044 	addi	r16,r16,1
    93f4:	0000f506 	br	97cc <___svfprintf_internal_r+0x4e4>
    93f8:	25fff404 	addi	r23,r4,-48
    93fc:	bdc03fcc 	andi	r23,r23,255
    9400:	00c00244 	movi	r3,9
    9404:	1dc00936 	bltu	r3,r23,942c <___svfprintf_internal_r+0x144>
    9408:	00bfffc4 	movi	r2,-1
    940c:	90800426 	beq	r18,r2,9420 <___svfprintf_internal_r+0x138>
    9410:	01400284 	movi	r5,10
    9414:	9009883a 	mov	r4,r18
    9418:	0009b080 	call	9b08 <__mulsi3>
    941c:	00000106 	br	9424 <___svfprintf_internal_r+0x13c>
    9420:	0005883a 	mov	r2,zero
    9424:	b8a5883a 	add	r18,r23,r2
    9428:	0000e206 	br	97b4 <___svfprintf_internal_r+0x4cc>
    942c:	01400b84 	movi	r5,46
    9430:	1140e426 	beq	r2,r5,97c4 <___svfprintf_internal_r+0x4dc>
    9434:	05c00084 	movi	r23,2
    9438:	213ff404 	addi	r4,r4,-48
    943c:	27003fcc 	andi	fp,r4,255
    9440:	00c00244 	movi	r3,9
    9444:	1f000936 	bltu	r3,fp,946c <___svfprintf_internal_r+0x184>
    9448:	00bfffc4 	movi	r2,-1
    944c:	98800426 	beq	r19,r2,9460 <___svfprintf_internal_r+0x178>
    9450:	01400284 	movi	r5,10
    9454:	9809883a 	mov	r4,r19
    9458:	0009b080 	call	9b08 <__mulsi3>
    945c:	00000106 	br	9464 <___svfprintf_internal_r+0x17c>
    9460:	0005883a 	mov	r2,zero
    9464:	e0a7883a 	add	r19,fp,r2
    9468:	0000d906 	br	97d0 <___svfprintf_internal_r+0x4e8>
    946c:	00c01b04 	movi	r3,108
    9470:	10c0d226 	beq	r2,r3,97bc <___svfprintf_internal_r+0x4d4>
    9474:	013fffc4 	movi	r4,-1
    9478:	99000226 	beq	r19,r4,9484 <___svfprintf_internal_r+0x19c>
    947c:	d8000b15 	stw	zero,44(sp)
    9480:	00000106 	br	9488 <___svfprintf_internal_r+0x1a0>
    9484:	04c00044 	movi	r19,1
    9488:	01001a44 	movi	r4,105
    948c:	11001626 	beq	r2,r4,94e8 <___svfprintf_internal_r+0x200>
    9490:	20800916 	blt	r4,r2,94b8 <___svfprintf_internal_r+0x1d0>
    9494:	010018c4 	movi	r4,99
    9498:	11008826 	beq	r2,r4,96bc <___svfprintf_internal_r+0x3d4>
    949c:	01001904 	movi	r4,100
    94a0:	11001126 	beq	r2,r4,94e8 <___svfprintf_internal_r+0x200>
    94a4:	01001604 	movi	r4,88
    94a8:	1100c81e 	bne	r2,r4,97cc <___svfprintf_internal_r+0x4e4>
    94ac:	00c00044 	movi	r3,1
    94b0:	d8c00e15 	stw	r3,56(sp)
    94b4:	00001506 	br	950c <___svfprintf_internal_r+0x224>
    94b8:	01001cc4 	movi	r4,115
    94bc:	11009826 	beq	r2,r4,9720 <___svfprintf_internal_r+0x438>
    94c0:	20800416 	blt	r4,r2,94d4 <___svfprintf_internal_r+0x1ec>
    94c4:	01001bc4 	movi	r4,111
    94c8:	1100c01e 	bne	r2,r4,97cc <___svfprintf_internal_r+0x4e4>
    94cc:	05400204 	movi	r21,8
    94d0:	00000f06 	br	9510 <___svfprintf_internal_r+0x228>
    94d4:	01001d44 	movi	r4,117
    94d8:	11000d26 	beq	r2,r4,9510 <___svfprintf_internal_r+0x228>
    94dc:	01001e04 	movi	r4,120
    94e0:	11000a26 	beq	r2,r4,950c <___svfprintf_internal_r+0x224>
    94e4:	0000b906 	br	97cc <___svfprintf_internal_r+0x4e4>
    94e8:	d8c00a17 	ldw	r3,40(sp)
    94ec:	b7000104 	addi	fp,r22,4
    94f0:	18000726 	beq	r3,zero,9510 <___svfprintf_internal_r+0x228>
    94f4:	df000d15 	stw	fp,52(sp)
    94f8:	b5c00017 	ldw	r23,0(r22)
    94fc:	b800080e 	bge	r23,zero,9520 <___svfprintf_internal_r+0x238>
    9500:	05efc83a 	sub	r23,zero,r23
    9504:	02400044 	movi	r9,1
    9508:	00000606 	br	9524 <___svfprintf_internal_r+0x23c>
    950c:	05400404 	movi	r21,16
    9510:	b0c00104 	addi	r3,r22,4
    9514:	d8c00d15 	stw	r3,52(sp)
    9518:	b5c00017 	ldw	r23,0(r22)
    951c:	d8000a15 	stw	zero,40(sp)
    9520:	0013883a 	mov	r9,zero
    9524:	d839883a 	mov	fp,sp
    9528:	b8001726 	beq	r23,zero,9588 <___svfprintf_internal_r+0x2a0>
    952c:	a80b883a 	mov	r5,r21
    9530:	b809883a 	mov	r4,r23
    9534:	da401015 	stw	r9,64(sp)
    9538:	0009a4c0 	call	9a4c <__udivsi3>
    953c:	a80b883a 	mov	r5,r21
    9540:	1009883a 	mov	r4,r2
    9544:	102d883a 	mov	r22,r2
    9548:	0009b080 	call	9b08 <__mulsi3>
    954c:	b885c83a 	sub	r2,r23,r2
    9550:	00c00244 	movi	r3,9
    9554:	da401017 	ldw	r9,64(sp)
    9558:	18800216 	blt	r3,r2,9564 <___svfprintf_internal_r+0x27c>
    955c:	10800c04 	addi	r2,r2,48
    9560:	00000506 	br	9578 <___svfprintf_internal_r+0x290>
    9564:	d8c00e17 	ldw	r3,56(sp)
    9568:	18000226 	beq	r3,zero,9574 <___svfprintf_internal_r+0x28c>
    956c:	10800dc4 	addi	r2,r2,55
    9570:	00000106 	br	9578 <___svfprintf_internal_r+0x290>
    9574:	108015c4 	addi	r2,r2,87
    9578:	e0800005 	stb	r2,0(fp)
    957c:	b02f883a 	mov	r23,r22
    9580:	e7000044 	addi	fp,fp,1
    9584:	003fe806 	br	9528 <_gp+0xffff5c88>
    9588:	e6efc83a 	sub	r23,fp,sp
    958c:	9dc5c83a 	sub	r2,r19,r23
    9590:	0080090e 	bge	zero,r2,95b8 <___svfprintf_internal_r+0x2d0>
    9594:	e085883a 	add	r2,fp,r2
    9598:	01400c04 	movi	r5,48
    959c:	d8c00917 	ldw	r3,36(sp)
    95a0:	e009883a 	mov	r4,fp
    95a4:	e0c0032e 	bgeu	fp,r3,95b4 <___svfprintf_internal_r+0x2cc>
    95a8:	e7000044 	addi	fp,fp,1
    95ac:	21400005 	stb	r5,0(r4)
    95b0:	e0bffa1e 	bne	fp,r2,959c <_gp+0xffff5cfc>
    95b4:	e6efc83a 	sub	r23,fp,sp
    95b8:	d8c00b17 	ldw	r3,44(sp)
    95bc:	4dd1883a 	add	r8,r9,r23
    95c0:	922dc83a 	sub	r22,r18,r8
    95c4:	18001626 	beq	r3,zero,9620 <___svfprintf_internal_r+0x338>
    95c8:	48000a26 	beq	r9,zero,95f4 <___svfprintf_internal_r+0x30c>
    95cc:	00800b44 	movi	r2,45
    95d0:	d8800805 	stb	r2,32(sp)
    95d4:	88800117 	ldw	r2,4(r17)
    95d8:	01c00044 	movi	r7,1
    95dc:	d9800804 	addi	r6,sp,32
    95e0:	880b883a 	mov	r5,r17
    95e4:	a009883a 	mov	r4,r20
    95e8:	103ee83a 	callr	r2
    95ec:	10004a1e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    95f0:	84000044 	addi	r16,r16,1
    95f4:	0580070e 	bge	zero,r22,9614 <___svfprintf_internal_r+0x32c>
    95f8:	b00f883a 	mov	r7,r22
    95fc:	01800c04 	movi	r6,48
    9600:	880b883a 	mov	r5,r17
    9604:	a009883a 	mov	r4,r20
    9608:	000927c0 	call	927c <print_repeat>
    960c:	1000421e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    9610:	85a1883a 	add	r16,r16,r22
    9614:	e02d883a 	mov	r22,fp
    9618:	bf2fc83a 	sub	r23,r23,fp
    961c:	00002006 	br	96a0 <___svfprintf_internal_r+0x3b8>
    9620:	0580090e 	bge	zero,r22,9648 <___svfprintf_internal_r+0x360>
    9624:	b00f883a 	mov	r7,r22
    9628:	01800804 	movi	r6,32
    962c:	880b883a 	mov	r5,r17
    9630:	a009883a 	mov	r4,r20
    9634:	da401015 	stw	r9,64(sp)
    9638:	000927c0 	call	927c <print_repeat>
    963c:	da401017 	ldw	r9,64(sp)
    9640:	1000351e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    9644:	85a1883a 	add	r16,r16,r22
    9648:	483ff226 	beq	r9,zero,9614 <_gp+0xffff5d74>
    964c:	00800b44 	movi	r2,45
    9650:	d8800805 	stb	r2,32(sp)
    9654:	88800117 	ldw	r2,4(r17)
    9658:	01c00044 	movi	r7,1
    965c:	d9800804 	addi	r6,sp,32
    9660:	880b883a 	mov	r5,r17
    9664:	a009883a 	mov	r4,r20
    9668:	103ee83a 	callr	r2
    966c:	10002a1e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    9670:	84000044 	addi	r16,r16,1
    9674:	003fe706 	br	9614 <_gp+0xffff5d74>
    9678:	b5bfffc4 	addi	r22,r22,-1
    967c:	b0800003 	ldbu	r2,0(r22)
    9680:	01c00044 	movi	r7,1
    9684:	d9800804 	addi	r6,sp,32
    9688:	d8800805 	stb	r2,32(sp)
    968c:	88800117 	ldw	r2,4(r17)
    9690:	880b883a 	mov	r5,r17
    9694:	a009883a 	mov	r4,r20
    9698:	103ee83a 	callr	r2
    969c:	10001e1e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    96a0:	8585c83a 	sub	r2,r16,r22
    96a4:	b5c9883a 	add	r4,r22,r23
    96a8:	e085883a 	add	r2,fp,r2
    96ac:	013ff216 	blt	zero,r4,9678 <_gp+0xffff5dd8>
    96b0:	1021883a 	mov	r16,r2
    96b4:	dd800d17 	ldw	r22,52(sp)
    96b8:	00004406 	br	97cc <___svfprintf_internal_r+0x4e4>
    96bc:	00800044 	movi	r2,1
    96c0:	1480080e 	bge	r2,r18,96e4 <___svfprintf_internal_r+0x3fc>
    96c4:	95ffffc4 	addi	r23,r18,-1
    96c8:	b80f883a 	mov	r7,r23
    96cc:	01800804 	movi	r6,32
    96d0:	880b883a 	mov	r5,r17
    96d4:	a009883a 	mov	r4,r20
    96d8:	000927c0 	call	927c <print_repeat>
    96dc:	10000e1e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    96e0:	85e1883a 	add	r16,r16,r23
    96e4:	b0800017 	ldw	r2,0(r22)
    96e8:	01c00044 	movi	r7,1
    96ec:	d80d883a 	mov	r6,sp
    96f0:	d8800005 	stb	r2,0(sp)
    96f4:	88800117 	ldw	r2,4(r17)
    96f8:	880b883a 	mov	r5,r17
    96fc:	a009883a 	mov	r4,r20
    9700:	b5c00104 	addi	r23,r22,4
    9704:	103ee83a 	callr	r2
    9708:	1000031e 	bne	r2,zero,9718 <___svfprintf_internal_r+0x430>
    970c:	84000044 	addi	r16,r16,1
    9710:	b82d883a 	mov	r22,r23
    9714:	00002d06 	br	97cc <___svfprintf_internal_r+0x4e4>
    9718:	00bfffc4 	movi	r2,-1
    971c:	00003106 	br	97e4 <___svfprintf_internal_r+0x4fc>
    9720:	b5c00017 	ldw	r23,0(r22)
    9724:	b7000104 	addi	fp,r22,4
    9728:	b809883a 	mov	r4,r23
    972c:	00099380 	call	9938 <strlen>
    9730:	9091c83a 	sub	r8,r18,r2
    9734:	102d883a 	mov	r22,r2
    9738:	0200090e 	bge	zero,r8,9760 <___svfprintf_internal_r+0x478>
    973c:	400f883a 	mov	r7,r8
    9740:	01800804 	movi	r6,32
    9744:	880b883a 	mov	r5,r17
    9748:	a009883a 	mov	r4,r20
    974c:	da001015 	stw	r8,64(sp)
    9750:	000927c0 	call	927c <print_repeat>
    9754:	da001017 	ldw	r8,64(sp)
    9758:	103fef1e 	bne	r2,zero,9718 <_gp+0xffff5e78>
    975c:	8221883a 	add	r16,r16,r8
    9760:	88800117 	ldw	r2,4(r17)
    9764:	b00f883a 	mov	r7,r22
    9768:	b80d883a 	mov	r6,r23
    976c:	880b883a 	mov	r5,r17
    9770:	a009883a 	mov	r4,r20
    9774:	103ee83a 	callr	r2
    9778:	103fe71e 	bne	r2,zero,9718 <_gp+0xffff5e78>
    977c:	85a1883a 	add	r16,r16,r22
    9780:	e02d883a 	mov	r22,fp
    9784:	00001106 	br	97cc <___svfprintf_internal_r+0x4e4>
    9788:	00c00044 	movi	r3,1
    978c:	04ffffc4 	movi	r19,-1
    9790:	d8000e15 	stw	zero,56(sp)
    9794:	d8c00a15 	stw	r3,40(sp)
    9798:	05400284 	movi	r21,10
    979c:	9825883a 	mov	r18,r19
    97a0:	d8000c15 	stw	zero,48(sp)
    97a4:	d8000b15 	stw	zero,44(sp)
    97a8:	182f883a 	mov	r23,r3
    97ac:	00000806 	br	97d0 <___svfprintf_internal_r+0x4e8>
    97b0:	ddc00b15 	stw	r23,44(sp)
    97b4:	05c00084 	movi	r23,2
    97b8:	00000506 	br	97d0 <___svfprintf_internal_r+0x4e8>
    97bc:	00c00044 	movi	r3,1
    97c0:	d8c00c15 	stw	r3,48(sp)
    97c4:	05c000c4 	movi	r23,3
    97c8:	00000106 	br	97d0 <___svfprintf_internal_r+0x4e8>
    97cc:	002f883a 	mov	r23,zero
    97d0:	d8c00f17 	ldw	r3,60(sp)
    97d4:	18c00044 	addi	r3,r3,1
    97d8:	d8c00f15 	stw	r3,60(sp)
    97dc:	003edc06 	br	9350 <_gp+0xffff5ab0>
    97e0:	8005883a 	mov	r2,r16
    97e4:	dfc01a17 	ldw	ra,104(sp)
    97e8:	df001917 	ldw	fp,100(sp)
    97ec:	ddc01817 	ldw	r23,96(sp)
    97f0:	dd801717 	ldw	r22,92(sp)
    97f4:	dd401617 	ldw	r21,88(sp)
    97f8:	dd001517 	ldw	r20,84(sp)
    97fc:	dcc01417 	ldw	r19,80(sp)
    9800:	dc801317 	ldw	r18,76(sp)
    9804:	dc401217 	ldw	r17,72(sp)
    9808:	dc001117 	ldw	r16,68(sp)
    980c:	dec01b04 	addi	sp,sp,108
    9810:	f800283a 	ret

00009814 <__vfprintf_internal_unused>:
    9814:	00800074 	movhi	r2,1
    9818:	10ae3004 	addi	r2,r2,-18240
    981c:	300f883a 	mov	r7,r6
    9820:	280d883a 	mov	r6,r5
    9824:	200b883a 	mov	r5,r4
    9828:	11000017 	ldw	r4,0(r2)
    982c:	00092e81 	jmpi	92e8 <___svfprintf_internal_r>

00009830 <__sfvwrite_small_str>:
    9830:	2880000b 	ldhu	r2,0(r5)
    9834:	10c0020c 	andi	r3,r2,8
    9838:	18002026 	beq	r3,zero,98bc <__sfvwrite_small_str+0x8c>
    983c:	28c0008f 	ldh	r3,2(r5)
    9840:	defffd04 	addi	sp,sp,-12
    9844:	dc000015 	stw	r16,0(sp)
    9848:	dfc00215 	stw	ra,8(sp)
    984c:	dc400115 	stw	r17,4(sp)
    9850:	2821883a 	mov	r16,r5
    9854:	1800150e 	bge	r3,zero,98ac <__sfvwrite_small_str+0x7c>
    9858:	10c0800c 	andi	r3,r2,512
    985c:	18001326 	beq	r3,zero,98ac <__sfvwrite_small_str+0x7c>
    9860:	2c400517 	ldw	r17,20(r5)
    9864:	89c0030e 	bge	r17,r7,9874 <__sfvwrite_small_str+0x44>
    9868:	10c0200c 	andi	r3,r2,128
    986c:	18000326 	beq	r3,zero,987c <__sfvwrite_small_str+0x4c>
    9870:	00000e06 	br	98ac <__sfvwrite_small_str+0x7c>
    9874:	3c40010e 	bge	r7,r17,987c <__sfvwrite_small_str+0x4c>
    9878:	3823883a 	mov	r17,r7
    987c:	81000417 	ldw	r4,16(r16)
    9880:	300b883a 	mov	r5,r6
    9884:	880d883a 	mov	r6,r17
    9888:	00098d80 	call	98d8 <memmove>
    988c:	80800517 	ldw	r2,20(r16)
    9890:	1445c83a 	sub	r2,r2,r17
    9894:	80800515 	stw	r2,20(r16)
    9898:	80800417 	ldw	r2,16(r16)
    989c:	1463883a 	add	r17,r2,r17
    98a0:	84400415 	stw	r17,16(r16)
    98a4:	0005883a 	mov	r2,zero
    98a8:	00000606 	br	98c4 <__sfvwrite_small_str+0x94>
    98ac:	10801014 	ori	r2,r2,64
    98b0:	8080000d 	sth	r2,0(r16)
    98b4:	00bfffc4 	movi	r2,-1
    98b8:	00000206 	br	98c4 <__sfvwrite_small_str+0x94>
    98bc:	00bfffc4 	movi	r2,-1
    98c0:	f800283a 	ret
    98c4:	dfc00217 	ldw	ra,8(sp)
    98c8:	dc400117 	ldw	r17,4(sp)
    98cc:	dc000017 	ldw	r16,0(sp)
    98d0:	dec00304 	addi	sp,sp,12
    98d4:	f800283a 	ret

000098d8 <memmove>:
    98d8:	2005883a 	mov	r2,r4
    98dc:	218f883a 	add	r7,r4,r6
    98e0:	29000236 	bltu	r5,r4,98ec <memmove+0x14>
    98e4:	1007883a 	mov	r3,r2
    98e8:	00000c06 	br	991c <memmove+0x44>
    98ec:	2987883a 	add	r3,r5,r6
    98f0:	20fffc2e 	bgeu	r4,r3,98e4 <_gp+0xffff6044>
    98f4:	380b883a 	mov	r5,r7
    98f8:	30cdc83a 	sub	r6,r6,r3
    98fc:	1989883a 	add	r4,r3,r6
    9900:	20000526 	beq	r4,zero,9918 <memmove+0x40>
    9904:	18ffffc4 	addi	r3,r3,-1
    9908:	19000003 	ldbu	r4,0(r3)
    990c:	297fffc4 	addi	r5,r5,-1
    9910:	29000005 	stb	r4,0(r5)
    9914:	003ff906 	br	98fc <_gp+0xffff605c>
    9918:	f800283a 	ret
    991c:	19c00526 	beq	r3,r7,9934 <memmove+0x5c>
    9920:	29000003 	ldbu	r4,0(r5)
    9924:	18c00044 	addi	r3,r3,1
    9928:	29400044 	addi	r5,r5,1
    992c:	193fffc5 	stb	r4,-1(r3)
    9930:	003ffa06 	br	991c <_gp+0xffff607c>
    9934:	f800283a 	ret

00009938 <strlen>:
    9938:	2005883a 	mov	r2,r4
    993c:	10c00007 	ldb	r3,0(r2)
    9940:	18000226 	beq	r3,zero,994c <strlen+0x14>
    9944:	10800044 	addi	r2,r2,1
    9948:	003ffc06 	br	993c <_gp+0xffff609c>
    994c:	1105c83a 	sub	r2,r2,r4
    9950:	f800283a 	ret

00009954 <__divsi3>:
    9954:	20001b16 	blt	r4,zero,99c4 <__divsi3+0x70>
    9958:	000f883a 	mov	r7,zero
    995c:	28001616 	blt	r5,zero,99b8 <__divsi3+0x64>
    9960:	200d883a 	mov	r6,r4
    9964:	29001a2e 	bgeu	r5,r4,99d0 <__divsi3+0x7c>
    9968:	00800804 	movi	r2,32
    996c:	00c00044 	movi	r3,1
    9970:	00000106 	br	9978 <__divsi3+0x24>
    9974:	10000d26 	beq	r2,zero,99ac <__divsi3+0x58>
    9978:	294b883a 	add	r5,r5,r5
    997c:	10bfffc4 	addi	r2,r2,-1
    9980:	18c7883a 	add	r3,r3,r3
    9984:	293ffb36 	bltu	r5,r4,9974 <_gp+0xffff60d4>
    9988:	0005883a 	mov	r2,zero
    998c:	18000726 	beq	r3,zero,99ac <__divsi3+0x58>
    9990:	0005883a 	mov	r2,zero
    9994:	31400236 	bltu	r6,r5,99a0 <__divsi3+0x4c>
    9998:	314dc83a 	sub	r6,r6,r5
    999c:	10c4b03a 	or	r2,r2,r3
    99a0:	1806d07a 	srli	r3,r3,1
    99a4:	280ad07a 	srli	r5,r5,1
    99a8:	183ffa1e 	bne	r3,zero,9994 <_gp+0xffff60f4>
    99ac:	38000126 	beq	r7,zero,99b4 <__divsi3+0x60>
    99b0:	0085c83a 	sub	r2,zero,r2
    99b4:	f800283a 	ret
    99b8:	014bc83a 	sub	r5,zero,r5
    99bc:	39c0005c 	xori	r7,r7,1
    99c0:	003fe706 	br	9960 <_gp+0xffff60c0>
    99c4:	0109c83a 	sub	r4,zero,r4
    99c8:	01c00044 	movi	r7,1
    99cc:	003fe306 	br	995c <_gp+0xffff60bc>
    99d0:	00c00044 	movi	r3,1
    99d4:	003fee06 	br	9990 <_gp+0xffff60f0>

000099d8 <__modsi3>:
    99d8:	20001716 	blt	r4,zero,9a38 <__modsi3+0x60>
    99dc:	000f883a 	mov	r7,zero
    99e0:	2005883a 	mov	r2,r4
    99e4:	28001216 	blt	r5,zero,9a30 <__modsi3+0x58>
    99e8:	2900162e 	bgeu	r5,r4,9a44 <__modsi3+0x6c>
    99ec:	01800804 	movi	r6,32
    99f0:	00c00044 	movi	r3,1
    99f4:	00000106 	br	99fc <__modsi3+0x24>
    99f8:	30000a26 	beq	r6,zero,9a24 <__modsi3+0x4c>
    99fc:	294b883a 	add	r5,r5,r5
    9a00:	31bfffc4 	addi	r6,r6,-1
    9a04:	18c7883a 	add	r3,r3,r3
    9a08:	293ffb36 	bltu	r5,r4,99f8 <_gp+0xffff6158>
    9a0c:	18000526 	beq	r3,zero,9a24 <__modsi3+0x4c>
    9a10:	1806d07a 	srli	r3,r3,1
    9a14:	11400136 	bltu	r2,r5,9a1c <__modsi3+0x44>
    9a18:	1145c83a 	sub	r2,r2,r5
    9a1c:	280ad07a 	srli	r5,r5,1
    9a20:	183ffb1e 	bne	r3,zero,9a10 <_gp+0xffff6170>
    9a24:	38000126 	beq	r7,zero,9a2c <__modsi3+0x54>
    9a28:	0085c83a 	sub	r2,zero,r2
    9a2c:	f800283a 	ret
    9a30:	014bc83a 	sub	r5,zero,r5
    9a34:	003fec06 	br	99e8 <_gp+0xffff6148>
    9a38:	0109c83a 	sub	r4,zero,r4
    9a3c:	01c00044 	movi	r7,1
    9a40:	003fe706 	br	99e0 <_gp+0xffff6140>
    9a44:	00c00044 	movi	r3,1
    9a48:	003ff106 	br	9a10 <_gp+0xffff6170>

00009a4c <__udivsi3>:
    9a4c:	200d883a 	mov	r6,r4
    9a50:	2900152e 	bgeu	r5,r4,9aa8 <__udivsi3+0x5c>
    9a54:	28001416 	blt	r5,zero,9aa8 <__udivsi3+0x5c>
    9a58:	00800804 	movi	r2,32
    9a5c:	00c00044 	movi	r3,1
    9a60:	00000206 	br	9a6c <__udivsi3+0x20>
    9a64:	10000e26 	beq	r2,zero,9aa0 <__udivsi3+0x54>
    9a68:	28000516 	blt	r5,zero,9a80 <__udivsi3+0x34>
    9a6c:	294b883a 	add	r5,r5,r5
    9a70:	10bfffc4 	addi	r2,r2,-1
    9a74:	18c7883a 	add	r3,r3,r3
    9a78:	293ffa36 	bltu	r5,r4,9a64 <_gp+0xffff61c4>
    9a7c:	18000826 	beq	r3,zero,9aa0 <__udivsi3+0x54>
    9a80:	0005883a 	mov	r2,zero
    9a84:	31400236 	bltu	r6,r5,9a90 <__udivsi3+0x44>
    9a88:	314dc83a 	sub	r6,r6,r5
    9a8c:	10c4b03a 	or	r2,r2,r3
    9a90:	1806d07a 	srli	r3,r3,1
    9a94:	280ad07a 	srli	r5,r5,1
    9a98:	183ffa1e 	bne	r3,zero,9a84 <_gp+0xffff61e4>
    9a9c:	f800283a 	ret
    9aa0:	0005883a 	mov	r2,zero
    9aa4:	f800283a 	ret
    9aa8:	00c00044 	movi	r3,1
    9aac:	003ff406 	br	9a80 <_gp+0xffff61e0>

00009ab0 <__umodsi3>:
    9ab0:	2005883a 	mov	r2,r4
    9ab4:	2900122e 	bgeu	r5,r4,9b00 <__umodsi3+0x50>
    9ab8:	28001116 	blt	r5,zero,9b00 <__umodsi3+0x50>
    9abc:	01800804 	movi	r6,32
    9ac0:	00c00044 	movi	r3,1
    9ac4:	00000206 	br	9ad0 <__umodsi3+0x20>
    9ac8:	30000c26 	beq	r6,zero,9afc <__umodsi3+0x4c>
    9acc:	28000516 	blt	r5,zero,9ae4 <__umodsi3+0x34>
    9ad0:	294b883a 	add	r5,r5,r5
    9ad4:	31bfffc4 	addi	r6,r6,-1
    9ad8:	18c7883a 	add	r3,r3,r3
    9adc:	293ffa36 	bltu	r5,r4,9ac8 <_gp+0xffff6228>
    9ae0:	18000626 	beq	r3,zero,9afc <__umodsi3+0x4c>
    9ae4:	1806d07a 	srli	r3,r3,1
    9ae8:	11400136 	bltu	r2,r5,9af0 <__umodsi3+0x40>
    9aec:	1145c83a 	sub	r2,r2,r5
    9af0:	280ad07a 	srli	r5,r5,1
    9af4:	183ffb1e 	bne	r3,zero,9ae4 <_gp+0xffff6244>
    9af8:	f800283a 	ret
    9afc:	f800283a 	ret
    9b00:	00c00044 	movi	r3,1
    9b04:	003ff706 	br	9ae4 <_gp+0xffff6244>

00009b08 <__mulsi3>:
    9b08:	0005883a 	mov	r2,zero
    9b0c:	20000726 	beq	r4,zero,9b2c <__mulsi3+0x24>
    9b10:	20c0004c 	andi	r3,r4,1
    9b14:	2008d07a 	srli	r4,r4,1
    9b18:	18000126 	beq	r3,zero,9b20 <__mulsi3+0x18>
    9b1c:	1145883a 	add	r2,r2,r5
    9b20:	294b883a 	add	r5,r5,r5
    9b24:	203ffa1e 	bne	r4,zero,9b10 <_gp+0xffff6270>
    9b28:	f800283a 	ret
    9b2c:	f800283a 	ret

00009b30 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    9b30:	defffc04 	addi	sp,sp,-16
    9b34:	df000315 	stw	fp,12(sp)
    9b38:	df000304 	addi	fp,sp,12
    9b3c:	e13ffd15 	stw	r4,-12(fp)
    9b40:	e17ffe15 	stw	r5,-8(fp)
    9b44:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    9b48:	e0fffe17 	ldw	r3,-8(fp)
    9b4c:	e0bffd17 	ldw	r2,-12(fp)
    9b50:	18800c26 	beq	r3,r2,9b84 <alt_load_section+0x54>
  {
    while( to != end )
    9b54:	00000806 	br	9b78 <alt_load_section+0x48>
    {
      *to++ = *from++;
    9b58:	e0bffe17 	ldw	r2,-8(fp)
    9b5c:	10c00104 	addi	r3,r2,4
    9b60:	e0fffe15 	stw	r3,-8(fp)
    9b64:	e0fffd17 	ldw	r3,-12(fp)
    9b68:	19000104 	addi	r4,r3,4
    9b6c:	e13ffd15 	stw	r4,-12(fp)
    9b70:	18c00017 	ldw	r3,0(r3)
    9b74:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    9b78:	e0fffe17 	ldw	r3,-8(fp)
    9b7c:	e0bfff17 	ldw	r2,-4(fp)
    9b80:	18bff51e 	bne	r3,r2,9b58 <_gp+0xffff62b8>
    {
      *to++ = *from++;
    }
  }
}
    9b84:	0001883a 	nop
    9b88:	e037883a 	mov	sp,fp
    9b8c:	df000017 	ldw	fp,0(sp)
    9b90:	dec00104 	addi	sp,sp,4
    9b94:	f800283a 	ret

00009b98 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    9b98:	defffe04 	addi	sp,sp,-8
    9b9c:	dfc00115 	stw	ra,4(sp)
    9ba0:	df000015 	stw	fp,0(sp)
    9ba4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    9ba8:	01800074 	movhi	r6,1
    9bac:	31ae3704 	addi	r6,r6,-18212
    9bb0:	01400074 	movhi	r5,1
    9bb4:	296d7004 	addi	r5,r5,-19008
    9bb8:	01000074 	movhi	r4,1
    9bbc:	212e3704 	addi	r4,r4,-18212
    9bc0:	0009b300 	call	9b30 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9bc4:	01800074 	movhi	r6,1
    9bc8:	31a00804 	addi	r6,r6,-32736
    9bcc:	01400074 	movhi	r5,1
    9bd0:	29600804 	addi	r5,r5,-32736
    9bd4:	01000074 	movhi	r4,1
    9bd8:	21200804 	addi	r4,r4,-32736
    9bdc:	0009b300 	call	9b30 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9be0:	01800074 	movhi	r6,1
    9be4:	31ad7004 	addi	r6,r6,-19008
    9be8:	01400074 	movhi	r5,1
    9bec:	296d5204 	addi	r5,r5,-19128
    9bf0:	01000074 	movhi	r4,1
    9bf4:	212d5204 	addi	r4,r4,-19128
    9bf8:	0009b300 	call	9b30 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9bfc:	000a8080 	call	a808 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9c00:	000a9c40 	call	a9c4 <alt_icache_flush_all>
}
    9c04:	0001883a 	nop
    9c08:	e037883a 	mov	sp,fp
    9c0c:	dfc00117 	ldw	ra,4(sp)
    9c10:	df000017 	ldw	fp,0(sp)
    9c14:	dec00204 	addi	sp,sp,8
    9c18:	f800283a 	ret

00009c1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9c1c:	defffd04 	addi	sp,sp,-12
    9c20:	dfc00215 	stw	ra,8(sp)
    9c24:	df000115 	stw	fp,4(sp)
    9c28:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9c2c:	0009883a 	mov	r4,zero
    9c30:	0009f540 	call	9f54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    9c34:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9c38:	0009f8c0 	call	9f8c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    9c3c:	01800074 	movhi	r6,1
    9c40:	31ad5f04 	addi	r6,r6,-19076
    9c44:	01400074 	movhi	r5,1
    9c48:	296d5f04 	addi	r5,r5,-19076
    9c4c:	01000074 	movhi	r4,1
    9c50:	212d5f04 	addi	r4,r4,-19076
    9c54:	000aac80 	call	aac8 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    9c58:	d0a0da17 	ldw	r2,-31896(gp)
    9c5c:	d0e0db17 	ldw	r3,-31892(gp)
    9c60:	d120dc17 	ldw	r4,-31888(gp)
    9c64:	200d883a 	mov	r6,r4
    9c68:	180b883a 	mov	r5,r3
    9c6c:	1009883a 	mov	r4,r2
    9c70:	0008f680 	call	8f68 <main>
    9c74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    9c78:	01000044 	movi	r4,1
    9c7c:	000a7300 	call	a730 <close>
  exit (result);
    9c80:	e13fff17 	ldw	r4,-4(fp)
    9c84:	000b03c0 	call	b03c <exit>

00009c88 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    9c88:	defff204 	addi	sp,sp,-56
    9c8c:	dfc00a15 	stw	ra,40(sp)
    9c90:	df000915 	stw	fp,36(sp)
    9c94:	df000904 	addi	fp,sp,36
    9c98:	e13fff15 	stw	r4,-4(fp)
    9c9c:	e1400215 	stw	r5,8(fp)
    9ca0:	e1800315 	stw	r6,12(fp)
    9ca4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
    9ca8:	e0800204 	addi	r2,fp,8
    9cac:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    9cb0:	e0bfff17 	ldw	r2,-4(fp)
    9cb4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
    9cb8:	00006f06 	br	9e78 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    9cbc:	e0bff807 	ldb	r2,-32(fp)
    9cc0:	10800960 	cmpeqi	r2,r2,37
    9cc4:	1000041e 	bne	r2,zero,9cd8 <alt_printf+0x50>
        {
            alt_putchar(c);
    9cc8:	e0bff807 	ldb	r2,-32(fp)
    9ccc:	1009883a 	mov	r4,r2
    9cd0:	0009eb40 	call	9eb4 <alt_putchar>
    9cd4:	00006806 	br	9e78 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    9cd8:	e0bff717 	ldw	r2,-36(fp)
    9cdc:	10c00044 	addi	r3,r2,1
    9ce0:	e0fff715 	stw	r3,-36(fp)
    9ce4:	10800003 	ldbu	r2,0(r2)
    9ce8:	e0bff805 	stb	r2,-32(fp)
    9cec:	e0bff807 	ldb	r2,-32(fp)
    9cf0:	10006926 	beq	r2,zero,9e98 <alt_printf+0x210>
            {
                if (c == '%')
    9cf4:	e0bff807 	ldb	r2,-32(fp)
    9cf8:	10800958 	cmpnei	r2,r2,37
    9cfc:	1000041e 	bne	r2,zero,9d10 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    9d00:	e0bff807 	ldb	r2,-32(fp)
    9d04:	1009883a 	mov	r4,r2
    9d08:	0009eb40 	call	9eb4 <alt_putchar>
    9d0c:	00005a06 	br	9e78 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
    9d10:	e0bff807 	ldb	r2,-32(fp)
    9d14:	108018d8 	cmpnei	r2,r2,99
    9d18:	1000081e 	bne	r2,zero,9d3c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
    9d1c:	e0bffe17 	ldw	r2,-8(fp)
    9d20:	10c00104 	addi	r3,r2,4
    9d24:	e0fffe15 	stw	r3,-8(fp)
    9d28:	10800017 	ldw	r2,0(r2)
    9d2c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
    9d30:	e13ffd17 	ldw	r4,-12(fp)
    9d34:	0009eb40 	call	9eb4 <alt_putchar>
    9d38:	00004f06 	br	9e78 <alt_printf+0x1f0>
                }
                else if (c == 'x')
    9d3c:	e0bff807 	ldb	r2,-32(fp)
    9d40:	10801e18 	cmpnei	r2,r2,120
    9d44:	1000341e 	bne	r2,zero,9e18 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    9d48:	e0bffe17 	ldw	r2,-8(fp)
    9d4c:	10c00104 	addi	r3,r2,4
    9d50:	e0fffe15 	stw	r3,-8(fp)
    9d54:	10800017 	ldw	r2,0(r2)
    9d58:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    9d5c:	e0bffb17 	ldw	r2,-20(fp)
    9d60:	1000031e 	bne	r2,zero,9d70 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
    9d64:	01000c04 	movi	r4,48
    9d68:	0009eb40 	call	9eb4 <alt_putchar>
                        continue;
    9d6c:	00004206 	br	9e78 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    9d70:	00800704 	movi	r2,28
    9d74:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
    9d78:	00000306 	br	9d88 <alt_printf+0x100>
                        digit_shift -= 4;
    9d7c:	e0bff917 	ldw	r2,-28(fp)
    9d80:	10bfff04 	addi	r2,r2,-4
    9d84:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    9d88:	00c003c4 	movi	r3,15
    9d8c:	e0bff917 	ldw	r2,-28(fp)
    9d90:	1884983a 	sll	r2,r3,r2
    9d94:	1007883a 	mov	r3,r2
    9d98:	e0bffb17 	ldw	r2,-20(fp)
    9d9c:	1884703a 	and	r2,r3,r2
    9da0:	103ff626 	beq	r2,zero,9d7c <_gp+0xffff64dc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    9da4:	00001906 	br	9e0c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    9da8:	00c003c4 	movi	r3,15
    9dac:	e0bff917 	ldw	r2,-28(fp)
    9db0:	1884983a 	sll	r2,r3,r2
    9db4:	1007883a 	mov	r3,r2
    9db8:	e0bffb17 	ldw	r2,-20(fp)
    9dbc:	1886703a 	and	r3,r3,r2
    9dc0:	e0bff917 	ldw	r2,-28(fp)
    9dc4:	1884d83a 	srl	r2,r3,r2
    9dc8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
    9dcc:	e0bffc17 	ldw	r2,-16(fp)
    9dd0:	108002a8 	cmpgeui	r2,r2,10
    9dd4:	1000041e 	bne	r2,zero,9de8 <alt_printf+0x160>
                            c = '0' + digit;
    9dd8:	e0bffc17 	ldw	r2,-16(fp)
    9ddc:	10800c04 	addi	r2,r2,48
    9de0:	e0bff805 	stb	r2,-32(fp)
    9de4:	00000306 	br	9df4 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
    9de8:	e0bffc17 	ldw	r2,-16(fp)
    9dec:	108015c4 	addi	r2,r2,87
    9df0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
    9df4:	e0bff807 	ldb	r2,-32(fp)
    9df8:	1009883a 	mov	r4,r2
    9dfc:	0009eb40 	call	9eb4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    9e00:	e0bff917 	ldw	r2,-28(fp)
    9e04:	10bfff04 	addi	r2,r2,-4
    9e08:	e0bff915 	stw	r2,-28(fp)
    9e0c:	e0bff917 	ldw	r2,-28(fp)
    9e10:	103fe50e 	bge	r2,zero,9da8 <_gp+0xffff6508>
    9e14:	00001806 	br	9e78 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    9e18:	e0bff807 	ldb	r2,-32(fp)
    9e1c:	10801cd8 	cmpnei	r2,r2,115
    9e20:	1000151e 	bne	r2,zero,9e78 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    9e24:	e0bffe17 	ldw	r2,-8(fp)
    9e28:	10c00104 	addi	r3,r2,4
    9e2c:	e0fffe15 	stw	r3,-8(fp)
    9e30:	10800017 	ldw	r2,0(r2)
    9e34:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
    9e38:	00000906 	br	9e60 <alt_printf+0x1d8>
                      alt_putchar(*s++);
    9e3c:	e0bffa17 	ldw	r2,-24(fp)
    9e40:	10c00044 	addi	r3,r2,1
    9e44:	e0fffa15 	stw	r3,-24(fp)
    9e48:	10800003 	ldbu	r2,0(r2)
    9e4c:	10803fcc 	andi	r2,r2,255
    9e50:	1080201c 	xori	r2,r2,128
    9e54:	10bfe004 	addi	r2,r2,-128
    9e58:	1009883a 	mov	r4,r2
    9e5c:	0009eb40 	call	9eb4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    9e60:	e0bffa17 	ldw	r2,-24(fp)
    9e64:	10800003 	ldbu	r2,0(r2)
    9e68:	10803fcc 	andi	r2,r2,255
    9e6c:	1080201c 	xori	r2,r2,128
    9e70:	10bfe004 	addi	r2,r2,-128
    9e74:	103ff11e 	bne	r2,zero,9e3c <_gp+0xffff659c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    9e78:	e0bff717 	ldw	r2,-36(fp)
    9e7c:	10c00044 	addi	r3,r2,1
    9e80:	e0fff715 	stw	r3,-36(fp)
    9e84:	10800003 	ldbu	r2,0(r2)
    9e88:	e0bff805 	stb	r2,-32(fp)
    9e8c:	e0bff807 	ldb	r2,-32(fp)
    9e90:	103f8a1e 	bne	r2,zero,9cbc <_gp+0xffff641c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    9e94:	00000106 	br	9e9c <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
    9e98:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    9e9c:	0001883a 	nop
    9ea0:	e037883a 	mov	sp,fp
    9ea4:	dfc00117 	ldw	ra,4(sp)
    9ea8:	df000017 	ldw	fp,0(sp)
    9eac:	dec00504 	addi	sp,sp,20
    9eb0:	f800283a 	ret

00009eb4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    9eb4:	defffd04 	addi	sp,sp,-12
    9eb8:	dfc00215 	stw	ra,8(sp)
    9ebc:	df000115 	stw	fp,4(sp)
    9ec0:	df000104 	addi	fp,sp,4
    9ec4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    9ec8:	d0a00817 	ldw	r2,-32736(gp)
    9ecc:	10800217 	ldw	r2,8(r2)
    9ed0:	100b883a 	mov	r5,r2
    9ed4:	e13fff17 	ldw	r4,-4(fp)
    9ed8:	000b08c0 	call	b08c <putc>
#endif
#endif
}
    9edc:	e037883a 	mov	sp,fp
    9ee0:	dfc00117 	ldw	ra,4(sp)
    9ee4:	df000017 	ldw	fp,0(sp)
    9ee8:	dec00204 	addi	sp,sp,8
    9eec:	f800283a 	ret

00009ef0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    9ef0:	defffd04 	addi	sp,sp,-12
    9ef4:	dfc00215 	stw	ra,8(sp)
    9ef8:	df000115 	stw	fp,4(sp)
    9efc:	df000104 	addi	fp,sp,4
    9f00:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9f04:	e13fff17 	ldw	r4,-4(fp)
    9f08:	000a59c0 	call	a59c <alt_busy_sleep>
}
    9f0c:	e037883a 	mov	sp,fp
    9f10:	dfc00117 	ldw	ra,4(sp)
    9f14:	df000017 	ldw	fp,0(sp)
    9f18:	dec00204 	addi	sp,sp,8
    9f1c:	f800283a 	ret

00009f20 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9f20:	defffd04 	addi	sp,sp,-12
    9f24:	dfc00215 	stw	ra,8(sp)
    9f28:	df000115 	stw	fp,4(sp)
    9f2c:	df000104 	addi	fp,sp,4
    9f30:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9f34:	d1600b04 	addi	r5,gp,-32724
    9f38:	e13fff17 	ldw	r4,-4(fp)
    9f3c:	000a8900 	call	a890 <alt_dev_llist_insert>
}
    9f40:	e037883a 	mov	sp,fp
    9f44:	dfc00117 	ldw	ra,4(sp)
    9f48:	df000017 	ldw	fp,0(sp)
    9f4c:	dec00204 	addi	sp,sp,8
    9f50:	f800283a 	ret

00009f54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9f54:	defffd04 	addi	sp,sp,-12
    9f58:	dfc00215 	stw	ra,8(sp)
    9f5c:	df000115 	stw	fp,4(sp)
    9f60:	df000104 	addi	fp,sp,4
    9f64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    9f68:	000ae4c0 	call	ae4c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9f6c:	00800044 	movi	r2,1
    9f70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    9f74:	0001883a 	nop
    9f78:	e037883a 	mov	sp,fp
    9f7c:	dfc00117 	ldw	ra,4(sp)
    9f80:	df000017 	ldw	fp,0(sp)
    9f84:	dec00204 	addi	sp,sp,8
    9f88:	f800283a 	ret

00009f8c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9f8c:	defffe04 	addi	sp,sp,-8
    9f90:	dfc00115 	stw	ra,4(sp)
    9f94:	df000015 	stw	fp,0(sp)
    9f98:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9f9c:	01000074 	movhi	r4,1
    9fa0:	212da804 	addi	r4,r4,-18784
    9fa4:	0009f200 	call	9f20 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
    9fa8:	01000074 	movhi	r4,1
    9fac:	212db304 	addi	r4,r4,-18740
    9fb0:	0009f200 	call	9f20 <alt_dev_reg>
}
    9fb4:	0001883a 	nop
    9fb8:	e037883a 	mov	sp,fp
    9fbc:	dfc00117 	ldw	ra,4(sp)
    9fc0:	df000017 	ldw	fp,0(sp)
    9fc4:	dec00204 	addi	sp,sp,8
    9fc8:	f800283a 	ret

00009fcc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9fcc:	defffa04 	addi	sp,sp,-24
    9fd0:	dfc00515 	stw	ra,20(sp)
    9fd4:	df000415 	stw	fp,16(sp)
    9fd8:	df000404 	addi	fp,sp,16
    9fdc:	e13ffd15 	stw	r4,-12(fp)
    9fe0:	e17ffe15 	stw	r5,-8(fp)
    9fe4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9fe8:	e0bffd17 	ldw	r2,-12(fp)
    9fec:	10800017 	ldw	r2,0(r2)
    9ff0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9ff4:	e0bffc17 	ldw	r2,-16(fp)
    9ff8:	10c00a04 	addi	r3,r2,40
    9ffc:	e0bffd17 	ldw	r2,-12(fp)
    a000:	10800217 	ldw	r2,8(r2)
    a004:	100f883a 	mov	r7,r2
    a008:	e1bfff17 	ldw	r6,-4(fp)
    a00c:	e17ffe17 	ldw	r5,-8(fp)
    a010:	1809883a 	mov	r4,r3
    a014:	000a08c0 	call	a08c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a018:	e037883a 	mov	sp,fp
    a01c:	dfc00117 	ldw	ra,4(sp)
    a020:	df000017 	ldw	fp,0(sp)
    a024:	dec00204 	addi	sp,sp,8
    a028:	f800283a 	ret

0000a02c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a02c:	defffa04 	addi	sp,sp,-24
    a030:	dfc00515 	stw	ra,20(sp)
    a034:	df000415 	stw	fp,16(sp)
    a038:	df000404 	addi	fp,sp,16
    a03c:	e13ffd15 	stw	r4,-12(fp)
    a040:	e17ffe15 	stw	r5,-8(fp)
    a044:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a048:	e0bffd17 	ldw	r2,-12(fp)
    a04c:	10800017 	ldw	r2,0(r2)
    a050:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    a054:	e0bffc17 	ldw	r2,-16(fp)
    a058:	10c00a04 	addi	r3,r2,40
    a05c:	e0bffd17 	ldw	r2,-12(fp)
    a060:	10800217 	ldw	r2,8(r2)
    a064:	100f883a 	mov	r7,r2
    a068:	e1bfff17 	ldw	r6,-4(fp)
    a06c:	e17ffe17 	ldw	r5,-8(fp)
    a070:	1809883a 	mov	r4,r3
    a074:	000a1780 	call	a178 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    a078:	e037883a 	mov	sp,fp
    a07c:	dfc00117 	ldw	ra,4(sp)
    a080:	df000017 	ldw	fp,0(sp)
    a084:	dec00204 	addi	sp,sp,8
    a088:	f800283a 	ret

0000a08c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    a08c:	defff704 	addi	sp,sp,-36
    a090:	df000815 	stw	fp,32(sp)
    a094:	df000804 	addi	fp,sp,32
    a098:	e13ffc15 	stw	r4,-16(fp)
    a09c:	e17ffd15 	stw	r5,-12(fp)
    a0a0:	e1bffe15 	stw	r6,-8(fp)
    a0a4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    a0a8:	e0bffc17 	ldw	r2,-16(fp)
    a0ac:	10800017 	ldw	r2,0(r2)
    a0b0:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    a0b4:	e0bffd17 	ldw	r2,-12(fp)
    a0b8:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    a0bc:	e0bffe17 	ldw	r2,-8(fp)
    a0c0:	e0fffd17 	ldw	r3,-12(fp)
    a0c4:	1885883a 	add	r2,r3,r2
    a0c8:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    a0cc:	00001206 	br	a118 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    a0d0:	e0bff917 	ldw	r2,-28(fp)
    a0d4:	10800037 	ldwio	r2,0(r2)
    a0d8:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    a0dc:	e0bffb17 	ldw	r2,-20(fp)
    a0e0:	10a0000c 	andi	r2,r2,32768
    a0e4:	10000626 	beq	r2,zero,a100 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    a0e8:	e0bff817 	ldw	r2,-32(fp)
    a0ec:	10c00044 	addi	r3,r2,1
    a0f0:	e0fff815 	stw	r3,-32(fp)
    a0f4:	e0fffb17 	ldw	r3,-20(fp)
    a0f8:	10c00005 	stb	r3,0(r2)
    a0fc:	00000606 	br	a118 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    a100:	e0fff817 	ldw	r3,-32(fp)
    a104:	e0bffd17 	ldw	r2,-12(fp)
    a108:	1880071e 	bne	r3,r2,a128 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    a10c:	e0bfff17 	ldw	r2,-4(fp)
    a110:	1090000c 	andi	r2,r2,16384
    a114:	1000061e 	bne	r2,zero,a130 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    a118:	e0fff817 	ldw	r3,-32(fp)
    a11c:	e0bffa17 	ldw	r2,-24(fp)
    a120:	18bfeb36 	bltu	r3,r2,a0d0 <_gp+0xffff6830>
    a124:	00000306 	br	a134 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    a128:	0001883a 	nop
    a12c:	00000106 	br	a134 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    a130:	0001883a 	nop
    
  }

  if (ptr != buffer)
    a134:	e0fff817 	ldw	r3,-32(fp)
    a138:	e0bffd17 	ldw	r2,-12(fp)
    a13c:	18800426 	beq	r3,r2,a150 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    a140:	e0fff817 	ldw	r3,-32(fp)
    a144:	e0bffd17 	ldw	r2,-12(fp)
    a148:	1885c83a 	sub	r2,r3,r2
    a14c:	00000606 	br	a168 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    a150:	e0bfff17 	ldw	r2,-4(fp)
    a154:	1090000c 	andi	r2,r2,16384
    a158:	10000226 	beq	r2,zero,a164 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    a15c:	00bffd44 	movi	r2,-11
    a160:	00000106 	br	a168 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    a164:	00bffec4 	movi	r2,-5
}
    a168:	e037883a 	mov	sp,fp
    a16c:	df000017 	ldw	fp,0(sp)
    a170:	dec00104 	addi	sp,sp,4
    a174:	f800283a 	ret

0000a178 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    a178:	defff904 	addi	sp,sp,-28
    a17c:	df000615 	stw	fp,24(sp)
    a180:	df000604 	addi	fp,sp,24
    a184:	e13ffc15 	stw	r4,-16(fp)
    a188:	e17ffd15 	stw	r5,-12(fp)
    a18c:	e1bffe15 	stw	r6,-8(fp)
    a190:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    a194:	e0bffc17 	ldw	r2,-16(fp)
    a198:	10800017 	ldw	r2,0(r2)
    a19c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    a1a0:	e0bffe17 	ldw	r2,-8(fp)
    a1a4:	e0fffd17 	ldw	r3,-12(fp)
    a1a8:	1885883a 	add	r2,r3,r2
    a1ac:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    a1b0:	00000e06 	br	a1ec <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    a1b4:	e0bffa17 	ldw	r2,-24(fp)
    a1b8:	10800104 	addi	r2,r2,4
    a1bc:	10800037 	ldwio	r2,0(r2)
    a1c0:	10bfffec 	andhi	r2,r2,65535
    a1c4:	10000926 	beq	r2,zero,a1ec <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    a1c8:	e0fffa17 	ldw	r3,-24(fp)
    a1cc:	e0bffd17 	ldw	r2,-12(fp)
    a1d0:	11000044 	addi	r4,r2,1
    a1d4:	e13ffd15 	stw	r4,-12(fp)
    a1d8:	10800003 	ldbu	r2,0(r2)
    a1dc:	10803fcc 	andi	r2,r2,255
    a1e0:	1080201c 	xori	r2,r2,128
    a1e4:	10bfe004 	addi	r2,r2,-128
    a1e8:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    a1ec:	e0fffd17 	ldw	r3,-12(fp)
    a1f0:	e0bffb17 	ldw	r2,-20(fp)
    a1f4:	18bfef36 	bltu	r3,r2,a1b4 <_gp+0xffff6914>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    a1f8:	e0bffe17 	ldw	r2,-8(fp)
}
    a1fc:	e037883a 	mov	sp,fp
    a200:	df000017 	ldw	fp,0(sp)
    a204:	dec00104 	addi	sp,sp,4
    a208:	f800283a 	ret

0000a20c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    a20c:	defffd04 	addi	sp,sp,-12
    a210:	df000215 	stw	fp,8(sp)
    a214:	df000204 	addi	fp,sp,8
    a218:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    a21c:	e0bfff17 	ldw	r2,-4(fp)
    a220:	10800a17 	ldw	r2,40(r2)
    a224:	10800104 	addi	r2,r2,4
    a228:	10800037 	ldwio	r2,0(r2)
    a22c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    a230:	e0bffe17 	ldw	r2,-8(fp)
    a234:	10800054 	ori	r2,r2,1
    a238:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    a23c:	e0bfff17 	ldw	r2,-4(fp)
    a240:	10800a17 	ldw	r2,40(r2)
    a244:	10800104 	addi	r2,r2,4
    a248:	1007883a 	mov	r3,r2
    a24c:	e0bffe17 	ldw	r2,-8(fp)
    a250:	18800035 	stwio	r2,0(r3)
}
    a254:	0001883a 	nop
    a258:	e037883a 	mov	sp,fp
    a25c:	df000017 	ldw	fp,0(sp)
    a260:	dec00104 	addi	sp,sp,4
    a264:	f800283a 	ret

0000a268 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    a268:	defffd04 	addi	sp,sp,-12
    a26c:	df000215 	stw	fp,8(sp)
    a270:	df000204 	addi	fp,sp,8
    a274:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    a278:	e0bfff17 	ldw	r2,-4(fp)
    a27c:	10800a17 	ldw	r2,40(r2)
    a280:	10800104 	addi	r2,r2,4
    a284:	10800037 	ldwio	r2,0(r2)
    a288:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    a28c:	e0fffe17 	ldw	r3,-8(fp)
    a290:	00bfff84 	movi	r2,-2
    a294:	1884703a 	and	r2,r3,r2
    a298:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    a29c:	e0bfff17 	ldw	r2,-4(fp)
    a2a0:	10800a17 	ldw	r2,40(r2)
    a2a4:	10800104 	addi	r2,r2,4
    a2a8:	1007883a 	mov	r3,r2
    a2ac:	e0bffe17 	ldw	r2,-8(fp)
    a2b0:	18800035 	stwio	r2,0(r3)
}
    a2b4:	0001883a 	nop
    a2b8:	e037883a 	mov	sp,fp
    a2bc:	df000017 	ldw	fp,0(sp)
    a2c0:	dec00104 	addi	sp,sp,4
    a2c4:	f800283a 	ret

0000a2c8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    a2c8:	defffd04 	addi	sp,sp,-12
    a2cc:	df000215 	stw	fp,8(sp)
    a2d0:	df000204 	addi	fp,sp,8
    a2d4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    a2d8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    a2dc:	e0bfff17 	ldw	r2,-4(fp)
    a2e0:	10800a17 	ldw	r2,40(r2)
    a2e4:	10800084 	addi	r2,r2,2
    a2e8:	1080002b 	ldhuio	r2,0(r2)
    a2ec:	10bfffcc 	andi	r2,r2,65535
    a2f0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    a2f4:	e0bffe0b 	ldhu	r2,-8(fp)
}
    a2f8:	e037883a 	mov	sp,fp
    a2fc:	df000017 	ldw	fp,0(sp)
    a300:	dec00104 	addi	sp,sp,4
    a304:	f800283a 	ret

0000a308 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    a308:	defffd04 	addi	sp,sp,-12
    a30c:	df000215 	stw	fp,8(sp)
    a310:	df000204 	addi	fp,sp,8
    a314:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    a318:	e0bfff17 	ldw	r2,-4(fp)
    a31c:	10800a17 	ldw	r2,40(r2)
    a320:	10800104 	addi	r2,r2,4
    a324:	10800037 	ldwio	r2,0(r2)
    a328:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    a32c:	e0bffe17 	ldw	r2,-8(fp)
    a330:	1004d43a 	srli	r2,r2,16
}
    a334:	e037883a 	mov	sp,fp
    a338:	df000017 	ldw	fp,0(sp)
    a33c:	dec00104 	addi	sp,sp,4
    a340:	f800283a 	ret

0000a344 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    a344:	defffd04 	addi	sp,sp,-12
    a348:	df000215 	stw	fp,8(sp)
    a34c:	df000204 	addi	fp,sp,8
    a350:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    a354:	e0bfff17 	ldw	r2,-4(fp)
    a358:	1080800c 	andi	r2,r2,512
    a35c:	1004d27a 	srli	r2,r2,9
    a360:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
    a364:	e0bffe17 	ldw	r2,-8(fp)
    a368:	10000226 	beq	r2,zero,a374 <alt_up_rs232_check_parity+0x30>
    a36c:	00bfffc4 	movi	r2,-1
    a370:	00000106 	br	a378 <alt_up_rs232_check_parity+0x34>
    a374:	0005883a 	mov	r2,zero
}
    a378:	e037883a 	mov	sp,fp
    a37c:	df000017 	ldw	fp,0(sp)
    a380:	dec00104 	addi	sp,sp,4
    a384:	f800283a 	ret

0000a388 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    a388:	defffd04 	addi	sp,sp,-12
    a38c:	df000215 	stw	fp,8(sp)
    a390:	df000204 	addi	fp,sp,8
    a394:	e13ffe15 	stw	r4,-8(fp)
    a398:	2805883a 	mov	r2,r5
    a39c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    a3a0:	e0bffe17 	ldw	r2,-8(fp)
    a3a4:	10800a17 	ldw	r2,40(r2)
    a3a8:	1007883a 	mov	r3,r2
    a3ac:	e0bfff03 	ldbu	r2,-4(fp)
    a3b0:	18800035 	stwio	r2,0(r3)
	return 0;
    a3b4:	0005883a 	mov	r2,zero
}
    a3b8:	e037883a 	mov	sp,fp
    a3bc:	df000017 	ldw	fp,0(sp)
    a3c0:	dec00104 	addi	sp,sp,4
    a3c4:	f800283a 	ret

0000a3c8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    a3c8:	defffa04 	addi	sp,sp,-24
    a3cc:	dfc00515 	stw	ra,20(sp)
    a3d0:	df000415 	stw	fp,16(sp)
    a3d4:	df000404 	addi	fp,sp,16
    a3d8:	e13ffd15 	stw	r4,-12(fp)
    a3dc:	e17ffe15 	stw	r5,-8(fp)
    a3e0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    a3e4:	e0bffd17 	ldw	r2,-12(fp)
    a3e8:	10800a17 	ldw	r2,40(r2)
    a3ec:	10800037 	ldwio	r2,0(r2)
    a3f0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    a3f4:	e0bffc17 	ldw	r2,-16(fp)
    a3f8:	1007883a 	mov	r3,r2
    a3fc:	e0bffe17 	ldw	r2,-8(fp)
    a400:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    a404:	e13ffc17 	ldw	r4,-16(fp)
    a408:	000a3440 	call	a344 <alt_up_rs232_check_parity>
    a40c:	1007883a 	mov	r3,r2
    a410:	e0bfff17 	ldw	r2,-4(fp)
    a414:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    a418:	e0bffc17 	ldw	r2,-16(fp)
    a41c:	10a0000c 	andi	r2,r2,32768
    a420:	1004d3fa 	srli	r2,r2,15
    a424:	10bfffc4 	addi	r2,r2,-1
}
    a428:	e037883a 	mov	sp,fp
    a42c:	dfc00117 	ldw	ra,4(sp)
    a430:	df000017 	ldw	fp,0(sp)
    a434:	dec00204 	addi	sp,sp,8
    a438:	f800283a 	ret

0000a43c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    a43c:	defff804 	addi	sp,sp,-32
    a440:	dfc00715 	stw	ra,28(sp)
    a444:	df000615 	stw	fp,24(sp)
    a448:	df000604 	addi	fp,sp,24
    a44c:	e13ffd15 	stw	r4,-12(fp)
    a450:	e17ffe15 	stw	r5,-8(fp)
    a454:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    a458:	e0bffd17 	ldw	r2,-12(fp)
    a45c:	10800017 	ldw	r2,0(r2)
    a460:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    a464:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    a468:	00000c06 	br	a49c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    a46c:	e0bffe17 	ldw	r2,-8(fp)
    a470:	10c00044 	addi	r3,r2,1
    a474:	e0fffe15 	stw	r3,-8(fp)
    a478:	e0fffc04 	addi	r3,fp,-16
    a47c:	180d883a 	mov	r6,r3
    a480:	100b883a 	mov	r5,r2
    a484:	e13ffb17 	ldw	r4,-20(fp)
    a488:	000a3c80 	call	a3c8 <alt_up_rs232_read_data>
    a48c:	1000081e 	bne	r2,zero,a4b0 <alt_up_rs232_read_fd+0x74>
			count++;
    a490:	e0bffa17 	ldw	r2,-24(fp)
    a494:	10800044 	addi	r2,r2,1
    a498:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    a49c:	e0bfff17 	ldw	r2,-4(fp)
    a4a0:	10ffffc4 	addi	r3,r2,-1
    a4a4:	e0ffff15 	stw	r3,-4(fp)
    a4a8:	103ff01e 	bne	r2,zero,a46c <_gp+0xffff6bcc>
    a4ac:	00000106 	br	a4b4 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
    a4b0:	0001883a 	nop
	}
	return count;
    a4b4:	e0bffa17 	ldw	r2,-24(fp)
}
    a4b8:	e037883a 	mov	sp,fp
    a4bc:	dfc00117 	ldw	ra,4(sp)
    a4c0:	df000017 	ldw	fp,0(sp)
    a4c4:	dec00204 	addi	sp,sp,8
    a4c8:	f800283a 	ret

0000a4cc <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    a4cc:	defff904 	addi	sp,sp,-28
    a4d0:	dfc00615 	stw	ra,24(sp)
    a4d4:	df000515 	stw	fp,20(sp)
    a4d8:	df000504 	addi	fp,sp,20
    a4dc:	e13ffd15 	stw	r4,-12(fp)
    a4e0:	e17ffe15 	stw	r5,-8(fp)
    a4e4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    a4e8:	e0bffd17 	ldw	r2,-12(fp)
    a4ec:	10800017 	ldw	r2,0(r2)
    a4f0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    a4f4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    a4f8:	00000d06 	br	a530 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    a4fc:	e0bffe17 	ldw	r2,-8(fp)
    a500:	10800003 	ldbu	r2,0(r2)
    a504:	10803fcc 	andi	r2,r2,255
    a508:	100b883a 	mov	r5,r2
    a50c:	e13ffc17 	ldw	r4,-16(fp)
    a510:	000a3880 	call	a388 <alt_up_rs232_write_data>
    a514:	10000b1e 	bne	r2,zero,a544 <alt_up_rs232_write_fd+0x78>
		{
			count++;
    a518:	e0bffb17 	ldw	r2,-20(fp)
    a51c:	10800044 	addi	r2,r2,1
    a520:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    a524:	e0bffe17 	ldw	r2,-8(fp)
    a528:	10800044 	addi	r2,r2,1
    a52c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    a530:	e0bfff17 	ldw	r2,-4(fp)
    a534:	10ffffc4 	addi	r3,r2,-1
    a538:	e0ffff15 	stw	r3,-4(fp)
    a53c:	103fef1e 	bne	r2,zero,a4fc <_gp+0xffff6c5c>
    a540:	00000106 	br	a548 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
    a544:	0001883a 	nop
	}
	return count;
    a548:	e0bffb17 	ldw	r2,-20(fp)
}
    a54c:	e037883a 	mov	sp,fp
    a550:	dfc00117 	ldw	ra,4(sp)
    a554:	df000017 	ldw	fp,0(sp)
    a558:	dec00204 	addi	sp,sp,8
    a55c:	f800283a 	ret

0000a560 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    a560:	defffc04 	addi	sp,sp,-16
    a564:	dfc00315 	stw	ra,12(sp)
    a568:	df000215 	stw	fp,8(sp)
    a56c:	df000204 	addi	fp,sp,8
    a570:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    a574:	d1600b04 	addi	r5,gp,-32724
    a578:	e13fff17 	ldw	r4,-4(fp)
    a57c:	000a9340 	call	a934 <alt_find_dev>
    a580:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    a584:	e0bffe17 	ldw	r2,-8(fp)
}
    a588:	e037883a 	mov	sp,fp
    a58c:	dfc00117 	ldw	ra,4(sp)
    a590:	df000017 	ldw	fp,0(sp)
    a594:	dec00204 	addi	sp,sp,8
    a598:	f800283a 	ret

0000a59c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    a59c:	defffa04 	addi	sp,sp,-24
    a5a0:	dfc00515 	stw	ra,20(sp)
    a5a4:	df000415 	stw	fp,16(sp)
    a5a8:	df000404 	addi	fp,sp,16
    a5ac:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    a5b0:	00800244 	movi	r2,9
    a5b4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    a5b8:	014003f4 	movhi	r5,15
    a5bc:	29509004 	addi	r5,r5,16960
    a5c0:	e13ffd17 	ldw	r4,-12(fp)
    a5c4:	0009b080 	call	9b08 <__mulsi3>
    a5c8:	100b883a 	mov	r5,r2
    a5cc:	0100bef4 	movhi	r4,763
    a5d0:	213c2004 	addi	r4,r4,-3968
    a5d4:	0009a4c0 	call	9a4c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    a5d8:	100b883a 	mov	r5,r2
    a5dc:	01200034 	movhi	r4,32768
    a5e0:	213fffc4 	addi	r4,r4,-1
    a5e4:	0009a4c0 	call	9a4c <__udivsi3>
    a5e8:	100b883a 	mov	r5,r2
    a5ec:	e13fff17 	ldw	r4,-4(fp)
    a5f0:	0009a4c0 	call	9a4c <__udivsi3>
    a5f4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    a5f8:	e0bffe17 	ldw	r2,-8(fp)
    a5fc:	10002a26 	beq	r2,zero,a6a8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    a600:	e03ffc15 	stw	zero,-16(fp)
    a604:	00001706 	br	a664 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    a608:	00a00034 	movhi	r2,32768
    a60c:	10bfffc4 	addi	r2,r2,-1
    a610:	10bfffc4 	addi	r2,r2,-1
    a614:	103ffe1e 	bne	r2,zero,a610 <_gp+0xffff6d70>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    a618:	014003f4 	movhi	r5,15
    a61c:	29509004 	addi	r5,r5,16960
    a620:	e13ffd17 	ldw	r4,-12(fp)
    a624:	0009b080 	call	9b08 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    a628:	100b883a 	mov	r5,r2
    a62c:	0100bef4 	movhi	r4,763
    a630:	213c2004 	addi	r4,r4,-3968
    a634:	0009a4c0 	call	9a4c <__udivsi3>
    a638:	100b883a 	mov	r5,r2
    a63c:	01200034 	movhi	r4,32768
    a640:	213fffc4 	addi	r4,r4,-1
    a644:	0009a4c0 	call	9a4c <__udivsi3>
    a648:	1007883a 	mov	r3,r2
    a64c:	e0bfff17 	ldw	r2,-4(fp)
    a650:	10c5c83a 	sub	r2,r2,r3
    a654:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    a658:	e0bffc17 	ldw	r2,-16(fp)
    a65c:	10800044 	addi	r2,r2,1
    a660:	e0bffc15 	stw	r2,-16(fp)
    a664:	e0fffc17 	ldw	r3,-16(fp)
    a668:	e0bffe17 	ldw	r2,-8(fp)
    a66c:	18bfe616 	blt	r3,r2,a608 <_gp+0xffff6d68>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    a670:	014003f4 	movhi	r5,15
    a674:	29509004 	addi	r5,r5,16960
    a678:	e13ffd17 	ldw	r4,-12(fp)
    a67c:	0009b080 	call	9b08 <__mulsi3>
    a680:	100b883a 	mov	r5,r2
    a684:	0100bef4 	movhi	r4,763
    a688:	213c2004 	addi	r4,r4,-3968
    a68c:	0009a4c0 	call	9a4c <__udivsi3>
    a690:	e17fff17 	ldw	r5,-4(fp)
    a694:	1009883a 	mov	r4,r2
    a698:	0009b080 	call	9b08 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    a69c:	10bfffc4 	addi	r2,r2,-1
    a6a0:	103ffe1e 	bne	r2,zero,a69c <_gp+0xffff6dfc>
    a6a4:	00000d06 	br	a6dc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    a6a8:	014003f4 	movhi	r5,15
    a6ac:	29509004 	addi	r5,r5,16960
    a6b0:	e13ffd17 	ldw	r4,-12(fp)
    a6b4:	0009b080 	call	9b08 <__mulsi3>
    a6b8:	100b883a 	mov	r5,r2
    a6bc:	0100bef4 	movhi	r4,763
    a6c0:	213c2004 	addi	r4,r4,-3968
    a6c4:	0009a4c0 	call	9a4c <__udivsi3>
    a6c8:	e17fff17 	ldw	r5,-4(fp)
    a6cc:	1009883a 	mov	r4,r2
    a6d0:	0009b080 	call	9b08 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    a6d4:	10bfffc4 	addi	r2,r2,-1
    a6d8:	00bffe16 	blt	zero,r2,a6d4 <_gp+0xffff6e34>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    a6dc:	0005883a 	mov	r2,zero
}
    a6e0:	e037883a 	mov	sp,fp
    a6e4:	dfc00117 	ldw	ra,4(sp)
    a6e8:	df000017 	ldw	fp,0(sp)
    a6ec:	dec00204 	addi	sp,sp,8
    a6f0:	f800283a 	ret

0000a6f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a6f4:	defffe04 	addi	sp,sp,-8
    a6f8:	dfc00115 	stw	ra,4(sp)
    a6fc:	df000015 	stw	fp,0(sp)
    a700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a704:	d0a00e17 	ldw	r2,-32712(gp)
    a708:	10000326 	beq	r2,zero,a718 <alt_get_errno+0x24>
    a70c:	d0a00e17 	ldw	r2,-32712(gp)
    a710:	103ee83a 	callr	r2
    a714:	00000106 	br	a71c <alt_get_errno+0x28>
    a718:	d0a0dd04 	addi	r2,gp,-31884
}
    a71c:	e037883a 	mov	sp,fp
    a720:	dfc00117 	ldw	ra,4(sp)
    a724:	df000017 	ldw	fp,0(sp)
    a728:	dec00204 	addi	sp,sp,8
    a72c:	f800283a 	ret

0000a730 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    a730:	defffb04 	addi	sp,sp,-20
    a734:	dfc00415 	stw	ra,16(sp)
    a738:	df000315 	stw	fp,12(sp)
    a73c:	df000304 	addi	fp,sp,12
    a740:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    a744:	e0bfff17 	ldw	r2,-4(fp)
    a748:	10000816 	blt	r2,zero,a76c <close+0x3c>
    a74c:	01400304 	movi	r5,12
    a750:	e13fff17 	ldw	r4,-4(fp)
    a754:	0009b080 	call	9b08 <__mulsi3>
    a758:	1007883a 	mov	r3,r2
    a75c:	00800074 	movhi	r2,1
    a760:	10adc804 	addi	r2,r2,-18656
    a764:	1885883a 	add	r2,r3,r2
    a768:	00000106 	br	a770 <close+0x40>
    a76c:	0005883a 	mov	r2,zero
    a770:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    a774:	e0bffd17 	ldw	r2,-12(fp)
    a778:	10001926 	beq	r2,zero,a7e0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    a77c:	e0bffd17 	ldw	r2,-12(fp)
    a780:	10800017 	ldw	r2,0(r2)
    a784:	10800417 	ldw	r2,16(r2)
    a788:	10000626 	beq	r2,zero,a7a4 <close+0x74>
    a78c:	e0bffd17 	ldw	r2,-12(fp)
    a790:	10800017 	ldw	r2,0(r2)
    a794:	10800417 	ldw	r2,16(r2)
    a798:	e13ffd17 	ldw	r4,-12(fp)
    a79c:	103ee83a 	callr	r2
    a7a0:	00000106 	br	a7a8 <close+0x78>
    a7a4:	0005883a 	mov	r2,zero
    a7a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    a7ac:	e13fff17 	ldw	r4,-4(fp)
    a7b0:	000adc80 	call	adc8 <alt_release_fd>
    if (rval < 0)
    a7b4:	e0bffe17 	ldw	r2,-8(fp)
    a7b8:	1000070e 	bge	r2,zero,a7d8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    a7bc:	000a6f40 	call	a6f4 <alt_get_errno>
    a7c0:	1007883a 	mov	r3,r2
    a7c4:	e0bffe17 	ldw	r2,-8(fp)
    a7c8:	0085c83a 	sub	r2,zero,r2
    a7cc:	18800015 	stw	r2,0(r3)
      return -1;
    a7d0:	00bfffc4 	movi	r2,-1
    a7d4:	00000706 	br	a7f4 <close+0xc4>
    }
    return 0;
    a7d8:	0005883a 	mov	r2,zero
    a7dc:	00000506 	br	a7f4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a7e0:	000a6f40 	call	a6f4 <alt_get_errno>
    a7e4:	1007883a 	mov	r3,r2
    a7e8:	00801444 	movi	r2,81
    a7ec:	18800015 	stw	r2,0(r3)
    return -1;
    a7f0:	00bfffc4 	movi	r2,-1
  }
}
    a7f4:	e037883a 	mov	sp,fp
    a7f8:	dfc00117 	ldw	ra,4(sp)
    a7fc:	df000017 	ldw	fp,0(sp)
    a800:	dec00204 	addi	sp,sp,8
    a804:	f800283a 	ret

0000a808 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    a808:	deffff04 	addi	sp,sp,-4
    a80c:	df000015 	stw	fp,0(sp)
    a810:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    a814:	0001883a 	nop
    a818:	e037883a 	mov	sp,fp
    a81c:	df000017 	ldw	fp,0(sp)
    a820:	dec00104 	addi	sp,sp,4
    a824:	f800283a 	ret

0000a828 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    a828:	defffc04 	addi	sp,sp,-16
    a82c:	df000315 	stw	fp,12(sp)
    a830:	df000304 	addi	fp,sp,12
    a834:	e13ffd15 	stw	r4,-12(fp)
    a838:	e17ffe15 	stw	r5,-8(fp)
    a83c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    a840:	e0bfff17 	ldw	r2,-4(fp)
}
    a844:	e037883a 	mov	sp,fp
    a848:	df000017 	ldw	fp,0(sp)
    a84c:	dec00104 	addi	sp,sp,4
    a850:	f800283a 	ret

0000a854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a854:	defffe04 	addi	sp,sp,-8
    a858:	dfc00115 	stw	ra,4(sp)
    a85c:	df000015 	stw	fp,0(sp)
    a860:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a864:	d0a00e17 	ldw	r2,-32712(gp)
    a868:	10000326 	beq	r2,zero,a878 <alt_get_errno+0x24>
    a86c:	d0a00e17 	ldw	r2,-32712(gp)
    a870:	103ee83a 	callr	r2
    a874:	00000106 	br	a87c <alt_get_errno+0x28>
    a878:	d0a0dd04 	addi	r2,gp,-31884
}
    a87c:	e037883a 	mov	sp,fp
    a880:	dfc00117 	ldw	ra,4(sp)
    a884:	df000017 	ldw	fp,0(sp)
    a888:	dec00204 	addi	sp,sp,8
    a88c:	f800283a 	ret

0000a890 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    a890:	defffa04 	addi	sp,sp,-24
    a894:	dfc00515 	stw	ra,20(sp)
    a898:	df000415 	stw	fp,16(sp)
    a89c:	df000404 	addi	fp,sp,16
    a8a0:	e13ffe15 	stw	r4,-8(fp)
    a8a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    a8a8:	e0bffe17 	ldw	r2,-8(fp)
    a8ac:	10000326 	beq	r2,zero,a8bc <alt_dev_llist_insert+0x2c>
    a8b0:	e0bffe17 	ldw	r2,-8(fp)
    a8b4:	10800217 	ldw	r2,8(r2)
    a8b8:	1000061e 	bne	r2,zero,a8d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    a8bc:	000a8540 	call	a854 <alt_get_errno>
    a8c0:	1007883a 	mov	r3,r2
    a8c4:	00800584 	movi	r2,22
    a8c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    a8cc:	00bffa84 	movi	r2,-22
    a8d0:	00001306 	br	a920 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    a8d4:	e0bffe17 	ldw	r2,-8(fp)
    a8d8:	e0ffff17 	ldw	r3,-4(fp)
    a8dc:	e0fffc15 	stw	r3,-16(fp)
    a8e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    a8e4:	e0bffd17 	ldw	r2,-12(fp)
    a8e8:	e0fffc17 	ldw	r3,-16(fp)
    a8ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    a8f0:	e0bffc17 	ldw	r2,-16(fp)
    a8f4:	10c00017 	ldw	r3,0(r2)
    a8f8:	e0bffd17 	ldw	r2,-12(fp)
    a8fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    a900:	e0bffc17 	ldw	r2,-16(fp)
    a904:	10800017 	ldw	r2,0(r2)
    a908:	e0fffd17 	ldw	r3,-12(fp)
    a90c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    a910:	e0bffc17 	ldw	r2,-16(fp)
    a914:	e0fffd17 	ldw	r3,-12(fp)
    a918:	10c00015 	stw	r3,0(r2)

  return 0;  
    a91c:	0005883a 	mov	r2,zero
}
    a920:	e037883a 	mov	sp,fp
    a924:	dfc00117 	ldw	ra,4(sp)
    a928:	df000017 	ldw	fp,0(sp)
    a92c:	dec00204 	addi	sp,sp,8
    a930:	f800283a 	ret

0000a934 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a934:	defffa04 	addi	sp,sp,-24
    a938:	dfc00515 	stw	ra,20(sp)
    a93c:	df000415 	stw	fp,16(sp)
    a940:	df000404 	addi	fp,sp,16
    a944:	e13ffe15 	stw	r4,-8(fp)
    a948:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a94c:	e0bfff17 	ldw	r2,-4(fp)
    a950:	10800017 	ldw	r2,0(r2)
    a954:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a958:	e13ffe17 	ldw	r4,-8(fp)
    a95c:	00099380 	call	9938 <strlen>
    a960:	10800044 	addi	r2,r2,1
    a964:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a968:	00000d06 	br	a9a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a96c:	e0bffc17 	ldw	r2,-16(fp)
    a970:	10800217 	ldw	r2,8(r2)
    a974:	e0fffd17 	ldw	r3,-12(fp)
    a978:	180d883a 	mov	r6,r3
    a97c:	e17ffe17 	ldw	r5,-8(fp)
    a980:	1009883a 	mov	r4,r2
    a984:	000b05c0 	call	b05c <memcmp>
    a988:	1000021e 	bne	r2,zero,a994 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a98c:	e0bffc17 	ldw	r2,-16(fp)
    a990:	00000706 	br	a9b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a994:	e0bffc17 	ldw	r2,-16(fp)
    a998:	10800017 	ldw	r2,0(r2)
    a99c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a9a0:	e0fffc17 	ldw	r3,-16(fp)
    a9a4:	e0bfff17 	ldw	r2,-4(fp)
    a9a8:	18bff01e 	bne	r3,r2,a96c <_gp+0xffff70cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a9ac:	0005883a 	mov	r2,zero
}
    a9b0:	e037883a 	mov	sp,fp
    a9b4:	dfc00117 	ldw	ra,4(sp)
    a9b8:	df000017 	ldw	fp,0(sp)
    a9bc:	dec00204 	addi	sp,sp,8
    a9c0:	f800283a 	ret

0000a9c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    a9c4:	deffff04 	addi	sp,sp,-4
    a9c8:	df000015 	stw	fp,0(sp)
    a9cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    a9d0:	0001883a 	nop
    a9d4:	e037883a 	mov	sp,fp
    a9d8:	df000017 	ldw	fp,0(sp)
    a9dc:	dec00104 	addi	sp,sp,4
    a9e0:	f800283a 	ret

0000a9e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a9e4:	defff804 	addi	sp,sp,-32
    a9e8:	dfc00715 	stw	ra,28(sp)
    a9ec:	df000615 	stw	fp,24(sp)
    a9f0:	dc000515 	stw	r16,20(sp)
    a9f4:	df000604 	addi	fp,sp,24
    a9f8:	e13ffb15 	stw	r4,-20(fp)
    a9fc:	e17ffc15 	stw	r5,-16(fp)
    aa00:	e1bffd15 	stw	r6,-12(fp)
    aa04:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    aa08:	e1bffe17 	ldw	r6,-8(fp)
    aa0c:	e17ffd17 	ldw	r5,-12(fp)
    aa10:	e13ffc17 	ldw	r4,-16(fp)
    aa14:	000ac6c0 	call	ac6c <open>
    aa18:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    aa1c:	e0bffa17 	ldw	r2,-24(fp)
    aa20:	10002216 	blt	r2,zero,aaac <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    aa24:	04000074 	movhi	r16,1
    aa28:	842dc804 	addi	r16,r16,-18656
    aa2c:	e0bffa17 	ldw	r2,-24(fp)
    aa30:	01400304 	movi	r5,12
    aa34:	1009883a 	mov	r4,r2
    aa38:	0009b080 	call	9b08 <__mulsi3>
    aa3c:	8085883a 	add	r2,r16,r2
    aa40:	10c00017 	ldw	r3,0(r2)
    aa44:	e0bffb17 	ldw	r2,-20(fp)
    aa48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    aa4c:	04000074 	movhi	r16,1
    aa50:	842dc804 	addi	r16,r16,-18656
    aa54:	e0bffa17 	ldw	r2,-24(fp)
    aa58:	01400304 	movi	r5,12
    aa5c:	1009883a 	mov	r4,r2
    aa60:	0009b080 	call	9b08 <__mulsi3>
    aa64:	8085883a 	add	r2,r16,r2
    aa68:	10800104 	addi	r2,r2,4
    aa6c:	10c00017 	ldw	r3,0(r2)
    aa70:	e0bffb17 	ldw	r2,-20(fp)
    aa74:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    aa78:	04000074 	movhi	r16,1
    aa7c:	842dc804 	addi	r16,r16,-18656
    aa80:	e0bffa17 	ldw	r2,-24(fp)
    aa84:	01400304 	movi	r5,12
    aa88:	1009883a 	mov	r4,r2
    aa8c:	0009b080 	call	9b08 <__mulsi3>
    aa90:	8085883a 	add	r2,r16,r2
    aa94:	10800204 	addi	r2,r2,8
    aa98:	10c00017 	ldw	r3,0(r2)
    aa9c:	e0bffb17 	ldw	r2,-20(fp)
    aaa0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    aaa4:	e13ffa17 	ldw	r4,-24(fp)
    aaa8:	000adc80 	call	adc8 <alt_release_fd>
  }
} 
    aaac:	0001883a 	nop
    aab0:	e6ffff04 	addi	sp,fp,-4
    aab4:	dfc00217 	ldw	ra,8(sp)
    aab8:	df000117 	ldw	fp,4(sp)
    aabc:	dc000017 	ldw	r16,0(sp)
    aac0:	dec00304 	addi	sp,sp,12
    aac4:	f800283a 	ret

0000aac8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    aac8:	defffb04 	addi	sp,sp,-20
    aacc:	dfc00415 	stw	ra,16(sp)
    aad0:	df000315 	stw	fp,12(sp)
    aad4:	df000304 	addi	fp,sp,12
    aad8:	e13ffd15 	stw	r4,-12(fp)
    aadc:	e17ffe15 	stw	r5,-8(fp)
    aae0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    aae4:	01c07fc4 	movi	r7,511
    aae8:	01800044 	movi	r6,1
    aaec:	e17ffd17 	ldw	r5,-12(fp)
    aaf0:	01000074 	movhi	r4,1
    aaf4:	212dcb04 	addi	r4,r4,-18644
    aaf8:	000a9e40 	call	a9e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    aafc:	01c07fc4 	movi	r7,511
    ab00:	000d883a 	mov	r6,zero
    ab04:	e17ffe17 	ldw	r5,-8(fp)
    ab08:	01000074 	movhi	r4,1
    ab0c:	212dc804 	addi	r4,r4,-18656
    ab10:	000a9e40 	call	a9e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ab14:	01c07fc4 	movi	r7,511
    ab18:	01800044 	movi	r6,1
    ab1c:	e17fff17 	ldw	r5,-4(fp)
    ab20:	01000074 	movhi	r4,1
    ab24:	212dce04 	addi	r4,r4,-18632
    ab28:	000a9e40 	call	a9e4 <alt_open_fd>
}  
    ab2c:	0001883a 	nop
    ab30:	e037883a 	mov	sp,fp
    ab34:	dfc00117 	ldw	ra,4(sp)
    ab38:	df000017 	ldw	fp,0(sp)
    ab3c:	dec00204 	addi	sp,sp,8
    ab40:	f800283a 	ret

0000ab44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ab44:	defffe04 	addi	sp,sp,-8
    ab48:	dfc00115 	stw	ra,4(sp)
    ab4c:	df000015 	stw	fp,0(sp)
    ab50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ab54:	d0a00e17 	ldw	r2,-32712(gp)
    ab58:	10000326 	beq	r2,zero,ab68 <alt_get_errno+0x24>
    ab5c:	d0a00e17 	ldw	r2,-32712(gp)
    ab60:	103ee83a 	callr	r2
    ab64:	00000106 	br	ab6c <alt_get_errno+0x28>
    ab68:	d0a0dd04 	addi	r2,gp,-31884
}
    ab6c:	e037883a 	mov	sp,fp
    ab70:	dfc00117 	ldw	ra,4(sp)
    ab74:	df000017 	ldw	fp,0(sp)
    ab78:	dec00204 	addi	sp,sp,8
    ab7c:	f800283a 	ret

0000ab80 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    ab80:	defffb04 	addi	sp,sp,-20
    ab84:	dfc00415 	stw	ra,16(sp)
    ab88:	df000315 	stw	fp,12(sp)
    ab8c:	dc000215 	stw	r16,8(sp)
    ab90:	df000304 	addi	fp,sp,12
    ab94:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    ab98:	e0bffe17 	ldw	r2,-8(fp)
    ab9c:	10800217 	ldw	r2,8(r2)
    aba0:	10d00034 	orhi	r3,r2,16384
    aba4:	e0bffe17 	ldw	r2,-8(fp)
    aba8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    abac:	e03ffd15 	stw	zero,-12(fp)
    abb0:	00002306 	br	ac40 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    abb4:	04000074 	movhi	r16,1
    abb8:	842dc804 	addi	r16,r16,-18656
    abbc:	e0bffd17 	ldw	r2,-12(fp)
    abc0:	01400304 	movi	r5,12
    abc4:	1009883a 	mov	r4,r2
    abc8:	0009b080 	call	9b08 <__mulsi3>
    abcc:	8085883a 	add	r2,r16,r2
    abd0:	10c00017 	ldw	r3,0(r2)
    abd4:	e0bffe17 	ldw	r2,-8(fp)
    abd8:	10800017 	ldw	r2,0(r2)
    abdc:	1880151e 	bne	r3,r2,ac34 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    abe0:	04000074 	movhi	r16,1
    abe4:	842dc804 	addi	r16,r16,-18656
    abe8:	e0bffd17 	ldw	r2,-12(fp)
    abec:	01400304 	movi	r5,12
    abf0:	1009883a 	mov	r4,r2
    abf4:	0009b080 	call	9b08 <__mulsi3>
    abf8:	8085883a 	add	r2,r16,r2
    abfc:	10800204 	addi	r2,r2,8
    ac00:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ac04:	10000b0e 	bge	r2,zero,ac34 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    ac08:	01400304 	movi	r5,12
    ac0c:	e13ffd17 	ldw	r4,-12(fp)
    ac10:	0009b080 	call	9b08 <__mulsi3>
    ac14:	1007883a 	mov	r3,r2
    ac18:	00800074 	movhi	r2,1
    ac1c:	10adc804 	addi	r2,r2,-18656
    ac20:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ac24:	e0bffe17 	ldw	r2,-8(fp)
    ac28:	18800226 	beq	r3,r2,ac34 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    ac2c:	00bffcc4 	movi	r2,-13
    ac30:	00000806 	br	ac54 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ac34:	e0bffd17 	ldw	r2,-12(fp)
    ac38:	10800044 	addi	r2,r2,1
    ac3c:	e0bffd15 	stw	r2,-12(fp)
    ac40:	d0a00d17 	ldw	r2,-32716(gp)
    ac44:	1007883a 	mov	r3,r2
    ac48:	e0bffd17 	ldw	r2,-12(fp)
    ac4c:	18bfd92e 	bgeu	r3,r2,abb4 <_gp+0xffff7314>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ac50:	0005883a 	mov	r2,zero
}
    ac54:	e6ffff04 	addi	sp,fp,-4
    ac58:	dfc00217 	ldw	ra,8(sp)
    ac5c:	df000117 	ldw	fp,4(sp)
    ac60:	dc000017 	ldw	r16,0(sp)
    ac64:	dec00304 	addi	sp,sp,12
    ac68:	f800283a 	ret

0000ac6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ac6c:	defff604 	addi	sp,sp,-40
    ac70:	dfc00915 	stw	ra,36(sp)
    ac74:	df000815 	stw	fp,32(sp)
    ac78:	df000804 	addi	fp,sp,32
    ac7c:	e13ffd15 	stw	r4,-12(fp)
    ac80:	e17ffe15 	stw	r5,-8(fp)
    ac84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ac88:	00bfffc4 	movi	r2,-1
    ac8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    ac90:	00bffb44 	movi	r2,-19
    ac94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    ac98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ac9c:	d1600b04 	addi	r5,gp,-32724
    aca0:	e13ffd17 	ldw	r4,-12(fp)
    aca4:	000a9340 	call	a934 <alt_find_dev>
    aca8:	e0bff815 	stw	r2,-32(fp)
    acac:	e0bff817 	ldw	r2,-32(fp)
    acb0:	1000051e 	bne	r2,zero,acc8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    acb4:	e13ffd17 	ldw	r4,-12(fp)
    acb8:	000ae700 	call	ae70 <alt_find_file>
    acbc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    acc0:	00800044 	movi	r2,1
    acc4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    acc8:	e0bff817 	ldw	r2,-32(fp)
    accc:	10002b26 	beq	r2,zero,ad7c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    acd0:	e13ff817 	ldw	r4,-32(fp)
    acd4:	000af780 	call	af78 <alt_get_fd>
    acd8:	e0bff915 	stw	r2,-28(fp)
    acdc:	e0bff917 	ldw	r2,-28(fp)
    ace0:	1000030e 	bge	r2,zero,acf0 <open+0x84>
    {
      status = index;
    ace4:	e0bff917 	ldw	r2,-28(fp)
    ace8:	e0bffa15 	stw	r2,-24(fp)
    acec:	00002506 	br	ad84 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    acf0:	01400304 	movi	r5,12
    acf4:	e13ff917 	ldw	r4,-28(fp)
    acf8:	0009b080 	call	9b08 <__mulsi3>
    acfc:	1007883a 	mov	r3,r2
    ad00:	00800074 	movhi	r2,1
    ad04:	10adc804 	addi	r2,r2,-18656
    ad08:	1885883a 	add	r2,r3,r2
    ad0c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    ad10:	e0fffe17 	ldw	r3,-8(fp)
    ad14:	00900034 	movhi	r2,16384
    ad18:	10bfffc4 	addi	r2,r2,-1
    ad1c:	1886703a 	and	r3,r3,r2
    ad20:	e0bffc17 	ldw	r2,-16(fp)
    ad24:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    ad28:	e0bffb17 	ldw	r2,-20(fp)
    ad2c:	1000051e 	bne	r2,zero,ad44 <open+0xd8>
    ad30:	e13ffc17 	ldw	r4,-16(fp)
    ad34:	000ab800 	call	ab80 <alt_file_locked>
    ad38:	e0bffa15 	stw	r2,-24(fp)
    ad3c:	e0bffa17 	ldw	r2,-24(fp)
    ad40:	10001016 	blt	r2,zero,ad84 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    ad44:	e0bff817 	ldw	r2,-32(fp)
    ad48:	10800317 	ldw	r2,12(r2)
    ad4c:	10000826 	beq	r2,zero,ad70 <open+0x104>
    ad50:	e0bff817 	ldw	r2,-32(fp)
    ad54:	10800317 	ldw	r2,12(r2)
    ad58:	e1ffff17 	ldw	r7,-4(fp)
    ad5c:	e1bffe17 	ldw	r6,-8(fp)
    ad60:	e17ffd17 	ldw	r5,-12(fp)
    ad64:	e13ffc17 	ldw	r4,-16(fp)
    ad68:	103ee83a 	callr	r2
    ad6c:	00000106 	br	ad74 <open+0x108>
    ad70:	0005883a 	mov	r2,zero
    ad74:	e0bffa15 	stw	r2,-24(fp)
    ad78:	00000206 	br	ad84 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ad7c:	00bffb44 	movi	r2,-19
    ad80:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ad84:	e0bffa17 	ldw	r2,-24(fp)
    ad88:	1000090e 	bge	r2,zero,adb0 <open+0x144>
  {
    alt_release_fd (index);  
    ad8c:	e13ff917 	ldw	r4,-28(fp)
    ad90:	000adc80 	call	adc8 <alt_release_fd>
    ALT_ERRNO = -status;
    ad94:	000ab440 	call	ab44 <alt_get_errno>
    ad98:	1007883a 	mov	r3,r2
    ad9c:	e0bffa17 	ldw	r2,-24(fp)
    ada0:	0085c83a 	sub	r2,zero,r2
    ada4:	18800015 	stw	r2,0(r3)
    return -1;
    ada8:	00bfffc4 	movi	r2,-1
    adac:	00000106 	br	adb4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    adb0:	e0bff917 	ldw	r2,-28(fp)
}
    adb4:	e037883a 	mov	sp,fp
    adb8:	dfc00117 	ldw	ra,4(sp)
    adbc:	df000017 	ldw	fp,0(sp)
    adc0:	dec00204 	addi	sp,sp,8
    adc4:	f800283a 	ret

0000adc8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    adc8:	defffc04 	addi	sp,sp,-16
    adcc:	dfc00315 	stw	ra,12(sp)
    add0:	df000215 	stw	fp,8(sp)
    add4:	dc000115 	stw	r16,4(sp)
    add8:	df000204 	addi	fp,sp,8
    addc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    ade0:	e0bffe17 	ldw	r2,-8(fp)
    ade4:	108000d0 	cmplti	r2,r2,3
    ade8:	1000111e 	bne	r2,zero,ae30 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    adec:	04000074 	movhi	r16,1
    adf0:	842dc804 	addi	r16,r16,-18656
    adf4:	e0bffe17 	ldw	r2,-8(fp)
    adf8:	01400304 	movi	r5,12
    adfc:	1009883a 	mov	r4,r2
    ae00:	0009b080 	call	9b08 <__mulsi3>
    ae04:	8085883a 	add	r2,r16,r2
    ae08:	10800204 	addi	r2,r2,8
    ae0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    ae10:	04000074 	movhi	r16,1
    ae14:	842dc804 	addi	r16,r16,-18656
    ae18:	e0bffe17 	ldw	r2,-8(fp)
    ae1c:	01400304 	movi	r5,12
    ae20:	1009883a 	mov	r4,r2
    ae24:	0009b080 	call	9b08 <__mulsi3>
    ae28:	8085883a 	add	r2,r16,r2
    ae2c:	10000015 	stw	zero,0(r2)
  }
}
    ae30:	0001883a 	nop
    ae34:	e6ffff04 	addi	sp,fp,-4
    ae38:	dfc00217 	ldw	ra,8(sp)
    ae3c:	df000117 	ldw	fp,4(sp)
    ae40:	dc000017 	ldw	r16,0(sp)
    ae44:	dec00304 	addi	sp,sp,12
    ae48:	f800283a 	ret

0000ae4c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    ae4c:	deffff04 	addi	sp,sp,-4
    ae50:	df000015 	stw	fp,0(sp)
    ae54:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    ae58:	000170fa 	wrctl	ienable,zero
}
    ae5c:	0001883a 	nop
    ae60:	e037883a 	mov	sp,fp
    ae64:	df000017 	ldw	fp,0(sp)
    ae68:	dec00104 	addi	sp,sp,4
    ae6c:	f800283a 	ret

0000ae70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    ae70:	defffb04 	addi	sp,sp,-20
    ae74:	dfc00415 	stw	ra,16(sp)
    ae78:	df000315 	stw	fp,12(sp)
    ae7c:	df000304 	addi	fp,sp,12
    ae80:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    ae84:	d0a00917 	ldw	r2,-32732(gp)
    ae88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ae8c:	00003106 	br	af54 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    ae90:	e0bffd17 	ldw	r2,-12(fp)
    ae94:	10800217 	ldw	r2,8(r2)
    ae98:	1009883a 	mov	r4,r2
    ae9c:	00099380 	call	9938 <strlen>
    aea0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    aea4:	e0bffd17 	ldw	r2,-12(fp)
    aea8:	10c00217 	ldw	r3,8(r2)
    aeac:	e0bffe17 	ldw	r2,-8(fp)
    aeb0:	10bfffc4 	addi	r2,r2,-1
    aeb4:	1885883a 	add	r2,r3,r2
    aeb8:	10800003 	ldbu	r2,0(r2)
    aebc:	10803fcc 	andi	r2,r2,255
    aec0:	1080201c 	xori	r2,r2,128
    aec4:	10bfe004 	addi	r2,r2,-128
    aec8:	10800bd8 	cmpnei	r2,r2,47
    aecc:	1000031e 	bne	r2,zero,aedc <alt_find_file+0x6c>
    {
      len -= 1;
    aed0:	e0bffe17 	ldw	r2,-8(fp)
    aed4:	10bfffc4 	addi	r2,r2,-1
    aed8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    aedc:	e0bffe17 	ldw	r2,-8(fp)
    aee0:	e0ffff17 	ldw	r3,-4(fp)
    aee4:	1885883a 	add	r2,r3,r2
    aee8:	10800003 	ldbu	r2,0(r2)
    aeec:	10803fcc 	andi	r2,r2,255
    aef0:	1080201c 	xori	r2,r2,128
    aef4:	10bfe004 	addi	r2,r2,-128
    aef8:	10800be0 	cmpeqi	r2,r2,47
    aefc:	1000081e 	bne	r2,zero,af20 <alt_find_file+0xb0>
    af00:	e0bffe17 	ldw	r2,-8(fp)
    af04:	e0ffff17 	ldw	r3,-4(fp)
    af08:	1885883a 	add	r2,r3,r2
    af0c:	10800003 	ldbu	r2,0(r2)
    af10:	10803fcc 	andi	r2,r2,255
    af14:	1080201c 	xori	r2,r2,128
    af18:	10bfe004 	addi	r2,r2,-128
    af1c:	10000a1e 	bne	r2,zero,af48 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    af20:	e0bffd17 	ldw	r2,-12(fp)
    af24:	10800217 	ldw	r2,8(r2)
    af28:	e0fffe17 	ldw	r3,-8(fp)
    af2c:	180d883a 	mov	r6,r3
    af30:	e17fff17 	ldw	r5,-4(fp)
    af34:	1009883a 	mov	r4,r2
    af38:	000b05c0 	call	b05c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    af3c:	1000021e 	bne	r2,zero,af48 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    af40:	e0bffd17 	ldw	r2,-12(fp)
    af44:	00000706 	br	af64 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    af48:	e0bffd17 	ldw	r2,-12(fp)
    af4c:	10800017 	ldw	r2,0(r2)
    af50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    af54:	e0fffd17 	ldw	r3,-12(fp)
    af58:	d0a00904 	addi	r2,gp,-32732
    af5c:	18bfcc1e 	bne	r3,r2,ae90 <_gp+0xffff75f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    af60:	0005883a 	mov	r2,zero
}
    af64:	e037883a 	mov	sp,fp
    af68:	dfc00117 	ldw	ra,4(sp)
    af6c:	df000017 	ldw	fp,0(sp)
    af70:	dec00204 	addi	sp,sp,8
    af74:	f800283a 	ret

0000af78 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    af78:	defffa04 	addi	sp,sp,-24
    af7c:	dfc00515 	stw	ra,20(sp)
    af80:	df000415 	stw	fp,16(sp)
    af84:	dc000315 	stw	r16,12(sp)
    af88:	df000404 	addi	fp,sp,16
    af8c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    af90:	00bffa04 	movi	r2,-24
    af94:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    af98:	e03ffc15 	stw	zero,-16(fp)
    af9c:	00001d06 	br	b014 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    afa0:	04000074 	movhi	r16,1
    afa4:	842dc804 	addi	r16,r16,-18656
    afa8:	e0bffc17 	ldw	r2,-16(fp)
    afac:	01400304 	movi	r5,12
    afb0:	1009883a 	mov	r4,r2
    afb4:	0009b080 	call	9b08 <__mulsi3>
    afb8:	8085883a 	add	r2,r16,r2
    afbc:	10800017 	ldw	r2,0(r2)
    afc0:	1000111e 	bne	r2,zero,b008 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    afc4:	04000074 	movhi	r16,1
    afc8:	842dc804 	addi	r16,r16,-18656
    afcc:	e0bffc17 	ldw	r2,-16(fp)
    afd0:	01400304 	movi	r5,12
    afd4:	1009883a 	mov	r4,r2
    afd8:	0009b080 	call	9b08 <__mulsi3>
    afdc:	8085883a 	add	r2,r16,r2
    afe0:	e0fffe17 	ldw	r3,-8(fp)
    afe4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    afe8:	d0e00d17 	ldw	r3,-32716(gp)
    afec:	e0bffc17 	ldw	r2,-16(fp)
    aff0:	1880020e 	bge	r3,r2,affc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    aff4:	e0bffc17 	ldw	r2,-16(fp)
    aff8:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
    affc:	e0bffc17 	ldw	r2,-16(fp)
    b000:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    b004:	00000606 	br	b020 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    b008:	e0bffc17 	ldw	r2,-16(fp)
    b00c:	10800044 	addi	r2,r2,1
    b010:	e0bffc15 	stw	r2,-16(fp)
    b014:	e0bffc17 	ldw	r2,-16(fp)
    b018:	10800810 	cmplti	r2,r2,32
    b01c:	103fe01e 	bne	r2,zero,afa0 <_gp+0xffff7700>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    b020:	e0bffd17 	ldw	r2,-12(fp)
}
    b024:	e6ffff04 	addi	sp,fp,-4
    b028:	dfc00217 	ldw	ra,8(sp)
    b02c:	df000117 	ldw	fp,4(sp)
    b030:	dc000017 	ldw	r16,0(sp)
    b034:	dec00304 	addi	sp,sp,12
    b038:	f800283a 	ret

0000b03c <exit>:
    b03c:	defffe04 	addi	sp,sp,-8
    b040:	000b883a 	mov	r5,zero
    b044:	dc000015 	stw	r16,0(sp)
    b048:	dfc00115 	stw	ra,4(sp)
    b04c:	2021883a 	mov	r16,r4
    b050:	000b1380 	call	b138 <__call_exitprocs>
    b054:	8009883a 	mov	r4,r16
    b058:	000b3d80 	call	b3d8 <_exit>

0000b05c <memcmp>:
    b05c:	218d883a 	add	r6,r4,r6
    b060:	21800826 	beq	r4,r6,b084 <memcmp+0x28>
    b064:	20800003 	ldbu	r2,0(r4)
    b068:	28c00003 	ldbu	r3,0(r5)
    b06c:	10c00226 	beq	r2,r3,b078 <memcmp+0x1c>
    b070:	10c5c83a 	sub	r2,r2,r3
    b074:	f800283a 	ret
    b078:	21000044 	addi	r4,r4,1
    b07c:	29400044 	addi	r5,r5,1
    b080:	003ff706 	br	b060 <_gp+0xffff77c0>
    b084:	0005883a 	mov	r2,zero
    b088:	f800283a 	ret

0000b08c <putc>:
    b08c:	defffd04 	addi	sp,sp,-12
    b090:	00800074 	movhi	r2,1
    b094:	dc000115 	stw	r16,4(sp)
    b098:	dfc00215 	stw	ra,8(sp)
    b09c:	10acb204 	addi	r2,r2,-19768
    b0a0:	28800115 	stw	r2,4(r5)
    b0a4:	00800074 	movhi	r2,1
    b0a8:	10ae3004 	addi	r2,r2,-18240
    b0ac:	d9000005 	stb	r4,0(sp)
    b0b0:	2021883a 	mov	r16,r4
    b0b4:	11000017 	ldw	r4,0(r2)
    b0b8:	01c00044 	movi	r7,1
    b0bc:	d80d883a 	mov	r6,sp
    b0c0:	000b2c80 	call	b2c8 <__sfvwrite_small_dev>
    b0c4:	00ffffc4 	movi	r3,-1
    b0c8:	10c00126 	beq	r2,r3,b0d0 <putc+0x44>
    b0cc:	8005883a 	mov	r2,r16
    b0d0:	dfc00217 	ldw	ra,8(sp)
    b0d4:	dc000117 	ldw	r16,4(sp)
    b0d8:	dec00304 	addi	sp,sp,12
    b0dc:	f800283a 	ret

0000b0e0 <_putc_r>:
    b0e0:	defffd04 	addi	sp,sp,-12
    b0e4:	00800074 	movhi	r2,1
    b0e8:	dc000115 	stw	r16,4(sp)
    b0ec:	dfc00215 	stw	ra,8(sp)
    b0f0:	10acb204 	addi	r2,r2,-19768
    b0f4:	30800115 	stw	r2,4(r6)
    b0f8:	00800074 	movhi	r2,1
    b0fc:	10ae3004 	addi	r2,r2,-18240
    b100:	11000017 	ldw	r4,0(r2)
    b104:	2821883a 	mov	r16,r5
    b108:	01c00044 	movi	r7,1
    b10c:	300b883a 	mov	r5,r6
    b110:	d80d883a 	mov	r6,sp
    b114:	dc000005 	stb	r16,0(sp)
    b118:	000b2c80 	call	b2c8 <__sfvwrite_small_dev>
    b11c:	00ffffc4 	movi	r3,-1
    b120:	10c00126 	beq	r2,r3,b128 <_putc_r+0x48>
    b124:	8005883a 	mov	r2,r16
    b128:	dfc00217 	ldw	ra,8(sp)
    b12c:	dc000117 	ldw	r16,4(sp)
    b130:	dec00304 	addi	sp,sp,12
    b134:	f800283a 	ret

0000b138 <__call_exitprocs>:
    b138:	defff504 	addi	sp,sp,-44
    b13c:	dd000515 	stw	r20,20(sp)
    b140:	05000074 	movhi	r20,1
    b144:	dc800315 	stw	r18,12(sp)
    b148:	dfc00a15 	stw	ra,40(sp)
    b14c:	df000915 	stw	fp,36(sp)
    b150:	ddc00815 	stw	r23,32(sp)
    b154:	dd800715 	stw	r22,28(sp)
    b158:	dd400615 	stw	r21,24(sp)
    b15c:	dcc00415 	stw	r19,16(sp)
    b160:	dc400215 	stw	r17,8(sp)
    b164:	dc000115 	stw	r16,4(sp)
    b168:	d9000015 	stw	r4,0(sp)
    b16c:	2825883a 	mov	r18,r5
    b170:	a52e2f04 	addi	r20,r20,-18244
    b174:	a4400017 	ldw	r17,0(r20)
    b178:	8cc00c17 	ldw	r19,48(r17)
    b17c:	8c400c04 	addi	r17,r17,48
    b180:	98004526 	beq	r19,zero,b298 <__call_exitprocs+0x160>
    b184:	9c000117 	ldw	r16,4(r19)
    b188:	00900034 	movhi	r2,16384
    b18c:	10bfffc4 	addi	r2,r2,-1
    b190:	9d402217 	ldw	r21,136(r19)
    b194:	85bfffc4 	addi	r22,r16,-1
    b198:	80a1883a 	add	r16,r16,r2
    b19c:	8421883a 	add	r16,r16,r16
    b1a0:	8421883a 	add	r16,r16,r16
    b1a4:	ac2f883a 	add	r23,r21,r16
    b1a8:	84000204 	addi	r16,r16,8
    b1ac:	9c21883a 	add	r16,r19,r16
    b1b0:	b0002716 	blt	r22,zero,b250 <__call_exitprocs+0x118>
    b1b4:	90000726 	beq	r18,zero,b1d4 <__call_exitprocs+0x9c>
    b1b8:	a800041e 	bne	r21,zero,b1cc <__call_exitprocs+0x94>
    b1bc:	b5bfffc4 	addi	r22,r22,-1
    b1c0:	bdffff04 	addi	r23,r23,-4
    b1c4:	843fff04 	addi	r16,r16,-4
    b1c8:	003ff906 	br	b1b0 <_gp+0xffff7910>
    b1cc:	b9002017 	ldw	r4,128(r23)
    b1d0:	913ffa1e 	bne	r18,r4,b1bc <_gp+0xffff791c>
    b1d4:	99000117 	ldw	r4,4(r19)
    b1d8:	82000017 	ldw	r8,0(r16)
    b1dc:	213fffc4 	addi	r4,r4,-1
    b1e0:	b100021e 	bne	r22,r4,b1ec <__call_exitprocs+0xb4>
    b1e4:	9d800115 	stw	r22,4(r19)
    b1e8:	00000106 	br	b1f0 <__call_exitprocs+0xb8>
    b1ec:	80000015 	stw	zero,0(r16)
    b1f0:	403ff226 	beq	r8,zero,b1bc <_gp+0xffff791c>
    b1f4:	9f000117 	ldw	fp,4(r19)
    b1f8:	a8000526 	beq	r21,zero,b210 <__call_exitprocs+0xd8>
    b1fc:	00800044 	movi	r2,1
    b200:	1592983a 	sll	r9,r2,r22
    b204:	a9404017 	ldw	r5,256(r21)
    b208:	494a703a 	and	r5,r9,r5
    b20c:	2800021e 	bne	r5,zero,b218 <__call_exitprocs+0xe0>
    b210:	403ee83a 	callr	r8
    b214:	00000906 	br	b23c <__call_exitprocs+0x104>
    b218:	a9004117 	ldw	r4,260(r21)
    b21c:	4908703a 	and	r4,r9,r4
    b220:	2000041e 	bne	r4,zero,b234 <__call_exitprocs+0xfc>
    b224:	b9400017 	ldw	r5,0(r23)
    b228:	d9000017 	ldw	r4,0(sp)
    b22c:	403ee83a 	callr	r8
    b230:	00000206 	br	b23c <__call_exitprocs+0x104>
    b234:	b9000017 	ldw	r4,0(r23)
    b238:	403ee83a 	callr	r8
    b23c:	99000117 	ldw	r4,4(r19)
    b240:	e13fcc1e 	bne	fp,r4,b174 <_gp+0xffff78d4>
    b244:	89000017 	ldw	r4,0(r17)
    b248:	993fdc26 	beq	r19,r4,b1bc <_gp+0xffff791c>
    b24c:	003fc906 	br	b174 <_gp+0xffff78d4>
    b250:	00800034 	movhi	r2,0
    b254:	10800004 	addi	r2,r2,0
    b258:	10000f26 	beq	r2,zero,b298 <__call_exitprocs+0x160>
    b25c:	99400117 	ldw	r5,4(r19)
    b260:	99000017 	ldw	r4,0(r19)
    b264:	2800091e 	bne	r5,zero,b28c <__call_exitprocs+0x154>
    b268:	20000826 	beq	r4,zero,b28c <__call_exitprocs+0x154>
    b26c:	89000015 	stw	r4,0(r17)
    b270:	a8000226 	beq	r21,zero,b27c <__call_exitprocs+0x144>
    b274:	a809883a 	mov	r4,r21
    b278:	00000000 	call	0 <__reset-0x8000>
    b27c:	9809883a 	mov	r4,r19
    b280:	00000000 	call	0 <__reset-0x8000>
    b284:	8cc00017 	ldw	r19,0(r17)
    b288:	003fbd06 	br	b180 <_gp+0xffff78e0>
    b28c:	9823883a 	mov	r17,r19
    b290:	2027883a 	mov	r19,r4
    b294:	003fba06 	br	b180 <_gp+0xffff78e0>
    b298:	dfc00a17 	ldw	ra,40(sp)
    b29c:	df000917 	ldw	fp,36(sp)
    b2a0:	ddc00817 	ldw	r23,32(sp)
    b2a4:	dd800717 	ldw	r22,28(sp)
    b2a8:	dd400617 	ldw	r21,24(sp)
    b2ac:	dd000517 	ldw	r20,20(sp)
    b2b0:	dcc00417 	ldw	r19,16(sp)
    b2b4:	dc800317 	ldw	r18,12(sp)
    b2b8:	dc400217 	ldw	r17,8(sp)
    b2bc:	dc000117 	ldw	r16,4(sp)
    b2c0:	dec00b04 	addi	sp,sp,44
    b2c4:	f800283a 	ret

0000b2c8 <__sfvwrite_small_dev>:
    b2c8:	2880000b 	ldhu	r2,0(r5)
    b2cc:	1080020c 	andi	r2,r2,8
    b2d0:	10002126 	beq	r2,zero,b358 <__sfvwrite_small_dev+0x90>
    b2d4:	2880008f 	ldh	r2,2(r5)
    b2d8:	defffa04 	addi	sp,sp,-24
    b2dc:	dc000015 	stw	r16,0(sp)
    b2e0:	dfc00515 	stw	ra,20(sp)
    b2e4:	dd000415 	stw	r20,16(sp)
    b2e8:	dcc00315 	stw	r19,12(sp)
    b2ec:	dc800215 	stw	r18,8(sp)
    b2f0:	dc400115 	stw	r17,4(sp)
    b2f4:	2821883a 	mov	r16,r5
    b2f8:	10001216 	blt	r2,zero,b344 <__sfvwrite_small_dev+0x7c>
    b2fc:	2027883a 	mov	r19,r4
    b300:	3025883a 	mov	r18,r6
    b304:	3823883a 	mov	r17,r7
    b308:	05010004 	movi	r20,1024
    b30c:	04400b0e 	bge	zero,r17,b33c <__sfvwrite_small_dev+0x74>
    b310:	880f883a 	mov	r7,r17
    b314:	a440010e 	bge	r20,r17,b31c <__sfvwrite_small_dev+0x54>
    b318:	01c10004 	movi	r7,1024
    b31c:	8140008f 	ldh	r5,2(r16)
    b320:	900d883a 	mov	r6,r18
    b324:	9809883a 	mov	r4,r19
    b328:	000b3800 	call	b380 <_write_r>
    b32c:	0080050e 	bge	zero,r2,b344 <__sfvwrite_small_dev+0x7c>
    b330:	88a3c83a 	sub	r17,r17,r2
    b334:	90a5883a 	add	r18,r18,r2
    b338:	003ff406 	br	b30c <_gp+0xffff7a6c>
    b33c:	0005883a 	mov	r2,zero
    b340:	00000706 	br	b360 <__sfvwrite_small_dev+0x98>
    b344:	8080000b 	ldhu	r2,0(r16)
    b348:	10801014 	ori	r2,r2,64
    b34c:	8080000d 	sth	r2,0(r16)
    b350:	00bfffc4 	movi	r2,-1
    b354:	00000206 	br	b360 <__sfvwrite_small_dev+0x98>
    b358:	00bfffc4 	movi	r2,-1
    b35c:	f800283a 	ret
    b360:	dfc00517 	ldw	ra,20(sp)
    b364:	dd000417 	ldw	r20,16(sp)
    b368:	dcc00317 	ldw	r19,12(sp)
    b36c:	dc800217 	ldw	r18,8(sp)
    b370:	dc400117 	ldw	r17,4(sp)
    b374:	dc000017 	ldw	r16,0(sp)
    b378:	dec00604 	addi	sp,sp,24
    b37c:	f800283a 	ret

0000b380 <_write_r>:
    b380:	defffd04 	addi	sp,sp,-12
    b384:	dc000015 	stw	r16,0(sp)
    b388:	04000074 	movhi	r16,1
    b38c:	dc400115 	stw	r17,4(sp)
    b390:	842f0504 	addi	r16,r16,-17388
    b394:	2023883a 	mov	r17,r4
    b398:	2809883a 	mov	r4,r5
    b39c:	300b883a 	mov	r5,r6
    b3a0:	380d883a 	mov	r6,r7
    b3a4:	dfc00215 	stw	ra,8(sp)
    b3a8:	80000015 	stw	zero,0(r16)
    b3ac:	000b4480 	call	b448 <write>
    b3b0:	00ffffc4 	movi	r3,-1
    b3b4:	10c0031e 	bne	r2,r3,b3c4 <_write_r+0x44>
    b3b8:	80c00017 	ldw	r3,0(r16)
    b3bc:	18000126 	beq	r3,zero,b3c4 <_write_r+0x44>
    b3c0:	88c00015 	stw	r3,0(r17)
    b3c4:	dfc00217 	ldw	ra,8(sp)
    b3c8:	dc400117 	ldw	r17,4(sp)
    b3cc:	dc000017 	ldw	r16,0(sp)
    b3d0:	dec00304 	addi	sp,sp,12
    b3d4:	f800283a 	ret

0000b3d8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b3d8:	defffd04 	addi	sp,sp,-12
    b3dc:	df000215 	stw	fp,8(sp)
    b3e0:	df000204 	addi	fp,sp,8
    b3e4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    b3e8:	0001883a 	nop
    b3ec:	e0bfff17 	ldw	r2,-4(fp)
    b3f0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    b3f4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b3f8:	10000226 	beq	r2,zero,b404 <_exit+0x2c>
    ALT_SIM_FAIL();
    b3fc:	002af070 	cmpltui	zero,zero,43969
    b400:	00000106 	br	b408 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    b404:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b408:	003fff06 	br	b408 <_gp+0xffff7b68>

0000b40c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b40c:	defffe04 	addi	sp,sp,-8
    b410:	dfc00115 	stw	ra,4(sp)
    b414:	df000015 	stw	fp,0(sp)
    b418:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b41c:	d0a00e17 	ldw	r2,-32712(gp)
    b420:	10000326 	beq	r2,zero,b430 <alt_get_errno+0x24>
    b424:	d0a00e17 	ldw	r2,-32712(gp)
    b428:	103ee83a 	callr	r2
    b42c:	00000106 	br	b434 <alt_get_errno+0x28>
    b430:	d0a0dd04 	addi	r2,gp,-31884
}
    b434:	e037883a 	mov	sp,fp
    b438:	dfc00117 	ldw	ra,4(sp)
    b43c:	df000017 	ldw	fp,0(sp)
    b440:	dec00204 	addi	sp,sp,8
    b444:	f800283a 	ret

0000b448 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b448:	defff904 	addi	sp,sp,-28
    b44c:	dfc00615 	stw	ra,24(sp)
    b450:	df000515 	stw	fp,20(sp)
    b454:	df000504 	addi	fp,sp,20
    b458:	e13ffd15 	stw	r4,-12(fp)
    b45c:	e17ffe15 	stw	r5,-8(fp)
    b460:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b464:	e0bffd17 	ldw	r2,-12(fp)
    b468:	10000816 	blt	r2,zero,b48c <write+0x44>
    b46c:	01400304 	movi	r5,12
    b470:	e13ffd17 	ldw	r4,-12(fp)
    b474:	0009b080 	call	9b08 <__mulsi3>
    b478:	1007883a 	mov	r3,r2
    b47c:	00800074 	movhi	r2,1
    b480:	10adc804 	addi	r2,r2,-18656
    b484:	1885883a 	add	r2,r3,r2
    b488:	00000106 	br	b490 <write+0x48>
    b48c:	0005883a 	mov	r2,zero
    b490:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b494:	e0bffb17 	ldw	r2,-20(fp)
    b498:	10002126 	beq	r2,zero,b520 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b49c:	e0bffb17 	ldw	r2,-20(fp)
    b4a0:	10800217 	ldw	r2,8(r2)
    b4a4:	108000cc 	andi	r2,r2,3
    b4a8:	10001826 	beq	r2,zero,b50c <write+0xc4>
    b4ac:	e0bffb17 	ldw	r2,-20(fp)
    b4b0:	10800017 	ldw	r2,0(r2)
    b4b4:	10800617 	ldw	r2,24(r2)
    b4b8:	10001426 	beq	r2,zero,b50c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b4bc:	e0bffb17 	ldw	r2,-20(fp)
    b4c0:	10800017 	ldw	r2,0(r2)
    b4c4:	10800617 	ldw	r2,24(r2)
    b4c8:	e0ffff17 	ldw	r3,-4(fp)
    b4cc:	180d883a 	mov	r6,r3
    b4d0:	e17ffe17 	ldw	r5,-8(fp)
    b4d4:	e13ffb17 	ldw	r4,-20(fp)
    b4d8:	103ee83a 	callr	r2
    b4dc:	e0bffc15 	stw	r2,-16(fp)
    b4e0:	e0bffc17 	ldw	r2,-16(fp)
    b4e4:	1000070e 	bge	r2,zero,b504 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    b4e8:	000b40c0 	call	b40c <alt_get_errno>
    b4ec:	1007883a 	mov	r3,r2
    b4f0:	e0bffc17 	ldw	r2,-16(fp)
    b4f4:	0085c83a 	sub	r2,zero,r2
    b4f8:	18800015 	stw	r2,0(r3)
        return -1;
    b4fc:	00bfffc4 	movi	r2,-1
    b500:	00000c06 	br	b534 <write+0xec>
      }
      return rval;
    b504:	e0bffc17 	ldw	r2,-16(fp)
    b508:	00000a06 	br	b534 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b50c:	000b40c0 	call	b40c <alt_get_errno>
    b510:	1007883a 	mov	r3,r2
    b514:	00800344 	movi	r2,13
    b518:	18800015 	stw	r2,0(r3)
    b51c:	00000406 	br	b530 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b520:	000b40c0 	call	b40c <alt_get_errno>
    b524:	1007883a 	mov	r3,r2
    b528:	00801444 	movi	r2,81
    b52c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b530:	00bfffc4 	movi	r2,-1
}
    b534:	e037883a 	mov	sp,fp
    b538:	dfc00117 	ldw	ra,4(sp)
    b53c:	df000017 	ldw	fp,0(sp)
    b540:	dec00204 	addi	sp,sp,8
    b544:	f800283a 	ret
